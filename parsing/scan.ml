# 2 "scan.mll"
 
    (*s: prolog *)
    module P = Parse    (* tokens are defined here *)
    module E = Error

    let nl lexbuf map =
        let next = (Lexing.lexeme_start lexbuf) + 1     in
            Srcmap.nl map next
    
    (*x: prolog *)
    let tab lexbuf map = ()
    (*x: prolog *)
    let location lexbuf map =
        Srcmap.location map (Lexing.lexeme_start lexbuf)
     
    let error lexbuf msg = Error.error msg
    (*x: prolog *)
    let get         = Lexing.lexeme
    let getchar     = Lexing.lexeme_char
    let strlen      = String.length
    let pos_start   = Lexing.lexeme_start
    let pos_end     = Lexing.lexeme_end
    let substr      = Auxfuns.substr
    (*x: prolog *)
    let keywords    = Hashtbl.create 127
    let keyword s   = Hashtbl.find keywords s

    let _ = Array.iter (fun (str,tok) -> Hashtbl.add keywords str tok)
        [|("aborts"         , P.ABORTS)
        ; ("align"          , P.ALIGN)
        ; ("aligned"        , P.ALIGNED)
        ; ("also"           , P.ALSO)
        ; ("as"             , P.AS)
        ; ("big"            , P.BIG)
        ; ("byteorder"      , P.BYTEORDER)
        ; ("case"           , P.CASE)
        ; ("const"          , P.CONST)
        ; ("continuation"   , P.CONTINUATION)
        ; ("cut"            , P.CUT)
        ; ("cuts"           , P.CUTS)
        ; ("else"           , P.ELSE)
        ; ("equal"          , P.EQUAL)
        ; ("export"         , P.EXPORT)
        ; ("fails"          , P.FAILS)
        ; ("foreign"        , P.FOREIGN)
        ; ("goto"           , P.GOTO)
        ; ("if"             , P.IF)
        ; ("import"         , P.IMPORT)
        ; ("in"             , P.IN)
        ; ("invariant"      , P.INVARIANT)
        ; ("jump"           , P.JUMP)
        ; ("limitcheck"     , P.LIMITCHECK)
        ; ("little"         , P.LITTLE)
        ; ("memsize"        , P.MEMSIZE)
        ; ("never"          , P.NEVER)
        ; ("pragma"         , P.PRAGMA)
        ; ("register"       , P.REGISTER)
        ; ("reads"          , P.READS)
        ; ("return"         , P.RETURN)
        ; ("returns"        , P.RETURNS)
        ; ("section"        , P.SECTION)
        ; ("semi"           , P.SEMI)
        ; ("span"           , P.SPAN)
        ; ("stackdata"      , P.STACKDATA)
        ; ("switch"         , P.SWITCH)
        ; ("target"         , P.TARGET)
        ; ("targets"        , P.TARGETS)
        ; ("to"             , P.TO)
        ; ("typedef"        , P.TYPEDEF)
        ; ("unicode"        , P.UNICODE)
        ; ("unwinds"        , P.UNWINDS)
        ; ("writes"         , P.WRITES)

        ; ("float"          , P.FLOATREPR)
        ; ("charset"        , P.CHARSET)
        ; ("pointersize"    , P.PTRSIZE)
        ; ("wordsize"       , P.WRDSIZE)

        |]
    (*x: prolog *)
    let rec decode_escape = function
        | 'a'  -> 7
        | 'b'  -> 8
        | 'n'  -> 10
        | 'r'  -> 13
        | 't'  -> 9
        | '\\' -> 92
        | '\'' -> 39
        | '"'  -> 34
        | '?'  -> 63
        |  _   -> Impossible.impossible "unknown escape sequence"

    let decode_hex c = match c with 
        | 'a' .. 'f' -> Char.code c - Char.code 'a' + 10
        | 'A' .. 'F' -> Char.code c - Char.code 'A' + 10
        | '0' .. '9' -> Char.code c - Char.code '0'
        | _          -> Impossible.impossible 
                            ("not a hexadecimal character: "^Char.escaped c)
    (*e: prolog *)

# 103 "scan.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\205\255\206\255\207\255\081\000\103\000\160\000\247\000\
    \078\001\002\000\031\000\067\000\226\255\227\255\228\255\229\255\
    \165\001\097\000\234\255\235\255\236\255\079\000\252\001\239\255\
    \240\255\241\255\242\255\243\255\244\255\083\002\246\255\083\000\
    \249\255\250\255\130\000\253\255\135\000\255\255\251\255\151\000\
    \247\255\170\002\001\003\238\255\225\255\135\000\209\255\086\000\
    \099\000\231\255\230\255\224\255\222\255\220\255\088\003\219\255\
    \175\003\006\004\093\004\180\004\213\255\077\001\251\001\255\004\
    \021\005\031\005\041\005\053\005\063\005\073\005\212\255\098\005\
    \128\005\199\005\253\255\254\255\255\255\136\000\254\255\255\255\
    \036\006\249\255\236\000\109\006\255\255\135\006\253\255\154\001\
    \250\255\040\001\248\255\121\000\251\255\136\000\214\001\255\255\
    \252\255\249\255\005\007\251\255\252\255\101\007\254\255\255\255\
    \220\007\250\255\051\008\252\255\253\255\161\000\255\255\135\006\
    \250\255\251\255\252\255\253\255\165\000\255\255\225\007\246\255\
    \247\255\134\000\250\255\251\255\252\255\253\255\229\007\255\255\
    \248\255\169\000\182\008\249\255\013\009\108\005\252\255\253\255\
    \187\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\045\000\041\000\038\000\038\000\
    \050\000\034\000\032\000\050\000\255\255\255\255\255\255\255\255\
    \038\000\022\000\255\255\255\255\255\255\018\000\023\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\038\000\255\255\007\000\
    \255\255\255\255\003\000\255\255\001\000\255\255\255\255\255\255\
    \255\255\010\000\039\000\255\255\255\255\047\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \038\000\038\000\038\000\037\000\255\255\255\255\255\255\040\000\
    \255\255\040\000\255\255\040\000\255\255\255\255\255\255\045\000\
    \044\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\006\000\255\255\001\000\255\255\004\000\
    \255\255\255\255\255\255\005\000\255\255\002\000\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255\
    \255\255\255\255\004\000\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\010\000\255\255\255\255\255\255\255\255\001\000\255\255\
    \255\255\006\000\255\255\255\255\005\000\004\000\255\255\255\255\
    \001\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\255\255\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\045\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\074\000\000\000\000\000\000\000\078\000\000\000\000\000\
    \081\000\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \000\000\094\000\000\000\255\255\000\000\255\255\094\000\000\000\
    \000\000\000\000\099\000\000\000\000\000\255\255\000\000\000\000\
    \105\000\000\000\255\255\000\000\000\000\255\255\000\000\112\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\126\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\126\000\000\000\
    \000\000\129\000\131\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\034\000\000\000\036\000\036\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\011\000\003\000\033\000\006\000\022\000\015\000\002\000\
    \028\000\027\000\018\000\020\000\030\000\019\000\029\000\017\000\
    \004\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\031\000\032\000\010\000\021\000\009\000\053\000\
    \016\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\024\000\052\000\023\000\013\000\006\000\
    \008\000\006\000\007\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\026\000\014\000\025\000\012\000\062\000\
    \051\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\046\000\044\000\040\000\039\000\039\000\
    \045\000\255\255\050\000\036\000\036\000\062\000\061\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\049\000\039\000\039\000\039\000\038\000\070\000\036\000\
    \097\000\069\000\033\000\096\000\061\000\109\000\109\000\079\000\
    \128\000\116\000\116\000\255\255\000\000\129\000\061\000\039\000\
    \000\000\000\000\038\000\000\000\060\000\000\000\000\000\000\000\
    \000\000\109\000\000\000\000\000\006\000\116\000\070\000\136\000\
    \136\000\069\000\000\000\000\000\061\000\000\000\006\000\000\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\000\000\136\000\060\000\000\000\000\000\000\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\000\000\006\000\
    \037\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\000\000\006\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\092\000\093\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\091\000\000\000\000\000\000\000\006\000\090\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \056\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\054\000\000\000\000\000\000\000\000\000\000\000\
    \068\000\000\000\068\000\000\000\054\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\255\255\000\000\000\000\000\000\054\000\000\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\006\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\000\000\006\000\000\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\255\255\
    \255\255\047\000\000\000\048\000\000\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \255\255\000\000\000\000\000\000\006\000\255\255\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \042\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \095\000\000\000\042\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \000\000\000\000\000\000\042\000\000\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\006\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\041\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\
    \000\000\000\000\006\000\000\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \006\000\000\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \000\000\006\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\042\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
    \042\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\054\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\000\000\000\000\054\000\
    \055\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\000\000\006\000\000\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\057\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\058\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\000\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \000\000\000\000\000\000\000\000\006\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\006\000\000\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000\
    \000\000\000\000\000\000\006\000\000\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \066\000\000\000\066\000\000\000\064\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\000\000\064\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \062\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\133\000\133\000\133\000\133\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\000\000\061\000\
    \000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\072\000\072\000\072\000\072\000\072\000\072\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\072\000\072\000\072\000\072\000\072\000\072\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\076\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\084\000\000\000\
    \000\000\000\000\000\000\084\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\084\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\083\000\000\000\000\000\000\000\
    \084\000\000\000\000\000\000\000\000\000\084\000\084\000\000\000\
    \000\000\000\000\084\000\000\000\000\000\000\000\000\000\000\000\
    \115\000\114\000\084\000\116\000\116\000\000\000\084\000\000\000\
    \084\000\000\000\000\000\000\000\083\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\116\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\000\000\000\000\000\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \086\000\086\000\086\000\086\000\086\000\086\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\113\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\101\000\101\000\102\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\100\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\117\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\000\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\108\000\107\000\000\000\
    \109\000\109\000\124\000\125\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\109\000\000\000\000\000\000\000\
    \106\000\000\000\000\000\120\000\000\000\103\000\000\000\255\255\
    \119\000\000\000\106\000\000\000\255\255\000\000\000\000\000\000\
    \121\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\000\000\
    \000\000\000\000\000\000\106\000\000\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \000\000\000\000\000\000\000\000\123\000\000\000\122\000\000\000\
    \255\255\106\000\255\255\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\000\000\000\000\
    \000\000\000\000\106\000\000\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\135\000\
    \000\000\000\000\136\000\136\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\
    \134\000\000\000\132\000\000\000\110\000\000\000\000\000\000\000\
    \000\000\127\000\000\000\000\000\132\000\255\255\133\000\133\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\000\000\000\000\000\000\000\000\132\000\000\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\132\000\000\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \000\000\000\000\000\000\000\000\132\000\000\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\137\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \011\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\017\000\021\000\031\000\034\000\034\000\
    \017\000\045\000\047\000\036\000\036\000\005\000\004\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\048\000\034\000\039\000\039\000\034\000\004\000\036\000\
    \091\000\004\000\036\000\093\000\005\000\109\000\109\000\077\000\
    \121\000\116\000\116\000\129\000\255\255\121\000\004\000\039\000\
    \255\255\255\255\039\000\255\255\005\000\255\255\255\255\255\255\
    \255\255\109\000\255\255\255\255\006\000\116\000\004\000\136\000\
    \136\000\004\000\255\255\255\255\005\000\255\255\006\000\255\255\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\255\255\136\000\005\000\255\255\255\255\255\255\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\255\255\255\255\255\255\255\255\006\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\007\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\255\255\007\000\255\255\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\089\000\089\000\255\255\255\255\255\255\255\255\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\089\000\255\255\255\255\255\255\007\000\089\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\008\000\255\255\255\255\255\255\255\255\255\255\
    \061\000\255\255\061\000\255\255\008\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\045\000\
    \077\000\255\255\255\255\255\255\255\255\255\255\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\129\000\255\255\255\255\255\255\008\000\255\255\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\016\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\255\255\016\000\255\255\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\094\000\
    \094\000\016\000\255\255\016\000\255\255\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \094\000\255\255\255\255\255\255\016\000\094\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \022\000\022\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \089\000\255\255\022\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\255\255\
    \255\255\255\255\255\255\022\000\255\255\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\029\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\255\255\255\255\
    \255\255\255\255\029\000\255\255\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\041\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\094\000\255\255\
    \041\000\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\255\255\255\255\255\255\
    \255\255\041\000\255\255\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\042\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\000\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\255\255\255\255\255\255\255\255\
    \042\000\255\255\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\054\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\054\000\255\255\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\255\255\255\255\255\255\255\255\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\056\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\056\000\255\255\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\255\255\255\255\255\255\255\255\255\255\255\255\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\255\255\255\255\255\255\255\255\056\000\255\255\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\057\000\255\255\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\255\255\255\255\255\255\255\255\057\000\255\255\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\058\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\058\000\255\255\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \255\255\255\255\255\255\255\255\058\000\255\255\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \059\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\059\000\255\255\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\255\255\
    \255\255\255\255\255\255\059\000\255\255\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \064\000\255\255\064\000\255\255\063\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\255\255\063\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\069\000\069\000\069\000\069\000\069\000\069\000\
    \071\000\255\255\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\133\000\133\000\133\000\133\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\255\255\071\000\
    \255\255\255\255\069\000\069\000\069\000\069\000\069\000\069\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\072\000\072\000\072\000\072\000\072\000\072\000\071\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\072\000\072\000\072\000\072\000\072\000\072\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\080\000\255\255\
    \255\255\255\255\255\255\080\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\080\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\080\000\255\255\255\255\255\255\
    \080\000\255\255\255\255\255\255\255\255\080\000\080\000\255\255\
    \255\255\255\255\080\000\255\255\255\255\255\255\255\255\255\255\
    \111\000\111\000\080\000\111\000\111\000\255\255\080\000\255\255\
    \080\000\255\255\255\255\255\255\080\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\111\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\083\000\083\000\
    \083\000\083\000\083\000\083\000\255\255\255\255\255\255\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\255\255\255\255\255\255\255\255\255\255\255\255\073\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \085\000\085\000\085\000\085\000\085\000\085\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\111\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\080\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\101\000\101\000\111\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\255\255\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\104\000\104\000\255\255\
    \104\000\104\000\118\000\118\000\255\255\255\255\126\000\126\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\104\000\255\255\255\255\255\255\
    \104\000\255\255\255\255\118\000\255\255\098\000\255\255\126\000\
    \118\000\255\255\104\000\255\255\126\000\255\255\255\255\255\255\
    \118\000\255\255\255\255\255\255\126\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\255\255\
    \255\255\255\255\255\255\104\000\255\255\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\106\000\
    \255\255\255\255\255\255\255\255\118\000\255\255\118\000\255\255\
    \126\000\106\000\126\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\255\255\255\255\
    \255\255\255\255\106\000\255\255\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\130\000\
    \255\255\255\255\130\000\130\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\130\000\255\255\
    \130\000\255\255\130\000\255\255\104\000\255\255\255\255\255\255\
    \255\255\118\000\255\255\255\255\130\000\126\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\255\255\255\255\255\255\255\255\130\000\255\255\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\132\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\132\000\255\255\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \255\255\255\255\255\255\255\255\132\000\255\255\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\130\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 133 "scan.mll"
                ( fun map -> P.EOF          )
# 829 "scan.ml"

  | 1 ->
# 134 "scan.mll"
                ( fun map -> token lexbuf map )
# 834 "scan.ml"

  | 2 ->
# 135 "scan.mll"
                ( fun map -> tab lexbuf map; token lexbuf map )
# 839 "scan.ml"

  | 3 ->
# 136 "scan.mll"
                ( fun map -> nl lexbuf map ; token lexbuf map )
# 844 "scan.ml"

  | 4 ->
# 137 "scan.mll"
                ( fun map -> line lexbuf map 0; token lexbuf map )
# 849 "scan.ml"

  | 5 ->
# 138 "scan.mll"
                ( fun map -> 
                  if Lexing.lexeme_start lexbuf = 0 then 
                        ( line lexbuf map 0
                        ; token lexbuf map
                        )
                  else
                        error lexbuf "illegal character" 
                )
# 861 "scan.ml"

  | 6 ->
# 146 "scan.mll"
                ( fun map -> P.SEMI         )
# 866 "scan.ml"

  | 7 ->
# 147 "scan.mll"
                ( fun map -> P.COLON        )
# 871 "scan.ml"

  | 8 ->
# 148 "scan.mll"
                ( fun map -> P.CCOLON       )
# 876 "scan.ml"

  | 9 ->
# 149 "scan.mll"
                ( fun map -> P.COMMA        )
# 881 "scan.ml"

  | 10 ->
# 150 "scan.mll"
                ( fun map -> P.DOTDOT       )
# 886 "scan.ml"

  | 11 ->
# 152 "scan.mll"
                ( fun map -> P.LPAREN       )
# 891 "scan.ml"

  | 12 ->
# 153 "scan.mll"
                ( fun map -> P.RPAREN       )
# 896 "scan.ml"

  | 13 ->
# 154 "scan.mll"
                ( fun map -> P.LBRACE       )
# 901 "scan.ml"

  | 14 ->
# 155 "scan.mll"
                ( fun map -> P.RBRACE       )
# 906 "scan.ml"

  | 15 ->
# 156 "scan.mll"
                ( fun map -> P.LBRACKET     )
# 911 "scan.ml"

  | 16 ->
# 157 "scan.mll"
                ( fun map -> P.RBRACKET     )
# 916 "scan.ml"

  | 17 ->
# 158 "scan.mll"
                ( fun map -> P.PPERCENT     )
# 921 "scan.ml"

  | 18 ->
# 161 "scan.mll"
                ( fun map -> P.EQUAL        )
# 926 "scan.ml"

  | 19 ->
# 166 "scan.mll"
                ( fun map -> P.PLUS(get lexbuf)      )
# 931 "scan.ml"

  | 20 ->
# 167 "scan.mll"
                ( fun map -> P.MINUS(get lexbuf)     )
# 936 "scan.ml"

  | 21 ->
# 168 "scan.mll"
                ( fun map -> P.STAR(get lexbuf)      )
# 941 "scan.ml"

  | 22 ->
# 169 "scan.mll"
                ( fun map -> P.SLASH(get lexbuf)     )
# 946 "scan.ml"

  | 23 ->
# 170 "scan.mll"
                ( fun map -> P.PERCENT(get lexbuf)   )
# 951 "scan.ml"

  | 24 ->
# 171 "scan.mll"
                 ( fun map -> P.GGREATER(get lexbuf)  )
# 956 "scan.ml"

  | 25 ->
# 172 "scan.mll"
                 ( fun map -> P.LLESS(get lexbuf)     )
# 961 "scan.ml"

  | 26 ->
# 173 "scan.mll"
                ( fun map -> P.AMPERSAND(get lexbuf) )
# 966 "scan.ml"

  | 27 ->
# 174 "scan.mll"
                ( fun map -> P.BAR(get lexbuf)       )
# 971 "scan.ml"

  | 28 ->
# 175 "scan.mll"
                ( fun map -> P.CARET(get lexbuf)     )
# 976 "scan.ml"

  | 29 ->
# 176 "scan.mll"
                ( fun map -> P.TILDE(get lexbuf)     )
# 981 "scan.ml"

  | 30 ->
# 177 "scan.mll"
                ( fun map -> P.EEQ(get lexbuf)       )
# 986 "scan.ml"

  | 31 ->
# 178 "scan.mll"
                ( fun map -> P.NEQ(get lexbuf)       )
# 991 "scan.ml"

  | 32 ->
# 179 "scan.mll"
                ( fun map -> P.LT(get lexbuf)        )
# 996 "scan.ml"

  | 33 ->
# 180 "scan.mll"
                ( fun map -> P.LEQ(get lexbuf)       )
# 1001 "scan.ml"

  | 34 ->
# 181 "scan.mll"
                ( fun map -> P.GT(get lexbuf)        )
# 1006 "scan.ml"

  | 35 ->
# 182 "scan.mll"
                ( fun map -> P.GEQ(get lexbuf)       )
# 1011 "scan.ml"

  | 36 ->
# 184 "scan.mll"
                ( fun map -> P.INFIXOP(substr 1 (-1) (get lexbuf)) )
# 1016 "scan.ml"

  | 37 ->
# 186 "scan.mll"
                ( fun map -> 
                  let s = substr 4 0 (get lexbuf) in
                  P.BITSn (int_of_string s)
                )
# 1024 "scan.ml"

  | 38 ->
# 191 "scan.mll"
                ( fun map ->  
                  let s  = get lexbuf in 
                  let k  = try keyword s with Not_found -> P.ID s in
                    if k = P.PRAGMA then pragma1 lexbuf map else k  
                )
# 1033 "scan.ml"

  | 39 ->
# 196 "scan.mll"
                ( fun map ->
                  let s = substr 1 0 (get lexbuf)
                  in P.PRIMOP(s)
                )
# 1041 "scan.ml"

  | 40 ->
# 200 "scan.mll"
                ( fun map -> P.FLT  (get lexbuf) )
# 1046 "scan.ml"

  | 41 ->
# 201 "scan.mll"
                ( fun map -> P.SINT (get lexbuf) )
# 1051 "scan.ml"

  | 42 ->
# 202 "scan.mll"
                ( fun map -> P.UINT (get lexbuf) )
# 1056 "scan.ml"

  | 43 ->
# 203 "scan.mll"
                ( fun map -> P.UINT (get lexbuf) )
# 1061 "scan.ml"

  | 44 ->
# 204 "scan.mll"
                ( fun map -> P.UINT (get lexbuf) )
# 1066 "scan.ml"

  | 45 ->
# 205 "scan.mll"
                ( fun map -> P.UINT (get lexbuf) )
# 1071 "scan.ml"

  | 46 ->
# 207 "scan.mll"
                ( fun map -> comment1 lexbuf map )
# 1076 "scan.ml"

  | 47 ->
# 208 "scan.mll"
                ( fun map -> token lexbuf map (* skip comment *) )
# 1081 "scan.ml"

  | 48 ->
# 210 "scan.mll"
                ( fun map -> string  lexbuf map (Buffer.create 80) )
# 1086 "scan.ml"

  | 49 ->
# 211 "scan.mll"
                ( fun map -> character lexbuf map )
# 1091 "scan.ml"

  | 50 ->
# 213 "scan.mll"
                ( fun map -> error lexbuf "illegal character" )
# 1096 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and character lexbuf =
    __ocaml_lex_character_rec lexbuf 73
and __ocaml_lex_character_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 216 "scan.mll"
                                ( fun map ->
                                  let i = escape lexbuf in
                                  if i >= 256 then
                                    error lexbuf "character literal too large"
                                  else  
                                    character_end lexbuf map i
                                )
# 1113 "scan.ml"

  | 1 ->
# 223 "scan.mll"
                                ( fun map -> 
                                  let c = getchar lexbuf 0 in
                                  character_end lexbuf map (Char.code c)   
                                )
# 1121 "scan.ml"

  | 2 ->
# 228 "scan.mll"
                                ( fun map ->
                                  error lexbuf 
                                    ( "illegal character literal: "
                                    ^  get lexbuf
                                    )
                                )
# 1131 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_character_rec lexbuf __ocaml_lex_state

and character_end lexbuf =
    __ocaml_lex_character_end_rec lexbuf 77
and __ocaml_lex_character_end_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 236 "scan.mll"
                                ( fun map i -> P.CHAR(i)           )
# 1142 "scan.ml"

  | 1 ->
# 237 "scan.mll"
                                ( fun map i -> 
                                  error lexbuf 
                                    ( "illegal character literal (too many characters): "
                                    ^  get lexbuf
                                    ) 
                                )
# 1152 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_character_end_rec lexbuf __ocaml_lex_state

and escape lexbuf =
    __ocaml_lex_escape_rec lexbuf 80
and __ocaml_lex_escape_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 245 "scan.mll"
                                ( decode_escape (getchar lexbuf 0) )
# 1163 "scan.ml"

  | 1 ->
# 246 "scan.mll"
                                ( decode_hex (getchar lexbuf 1)    )
# 1168 "scan.ml"

  | 2 ->
# 247 "scan.mll"
                                ( decode_hex (getchar lexbuf 1) * 16 + 
                                  decode_hex (getchar lexbuf 2) )
# 1174 "scan.ml"

  | 3 ->
# 249 "scan.mll"
                                ( decode_hex (getchar lexbuf 0) )
# 1179 "scan.ml"

  | 4 ->
# 250 "scan.mll"
                                ( decode_hex (getchar lexbuf 0) * 8 +
                                  decode_hex (getchar lexbuf 1) )
# 1185 "scan.ml"

  | 5 ->
# 252 "scan.mll"
                                ( decode_hex (getchar lexbuf 0) * 64 +
                                  decode_hex (getchar lexbuf 1) * 8  +
                                  decode_hex (getchar lexbuf 2) )
# 1192 "scan.ml"

  | 6 ->
# 255 "scan.mll"
                                ( error lexbuf "illegal escape sequence" )
# 1197 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_escape_rec lexbuf __ocaml_lex_state

and comment1 lexbuf =
    __ocaml_lex_comment1_rec lexbuf 89
and __ocaml_lex_comment1_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 258 "scan.mll"
                                ( fun map ->
                                  error lexbuf "unterminated comment" 
                                )
# 1210 "scan.ml"

  | 1 ->
# 261 "scan.mll"
                                ( fun map ->
                                  comment1 lexbuf map
                                )
# 1217 "scan.ml"

  | 2 ->
# 264 "scan.mll"
                                ( fun map ->
                                  nl lexbuf map; comment1 lexbuf map 
                                )
# 1224 "scan.ml"

  | 3 ->
# 267 "scan.mll"
                                ( fun map -> 
                                  line lexbuf map 0; comment1 lexbuf map
                                )
# 1231 "scan.ml"

  | 4 ->
# 271 "scan.mll"
                                ( fun map -> 
                                  tab lexbuf map; comment1 lexbuf map
                                )
# 1238 "scan.ml"

  | 5 ->
# 274 "scan.mll"
                                ( fun map ->
                                  comment1 lexbuf map
                                )
# 1245 "scan.ml"

  | 6 ->
# 277 "scan.mll"
                                ( fun map ->
                                  token lexbuf map 
                                )
# 1252 "scan.ml"

  | 7 ->
# 280 "scan.mll"
                                ( fun map ->
                                  comment1 lexbuf map 
                                )
# 1259 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment1_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 98
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 285 "scan.mll"
                                ( fun map buf -> 
                                  error lexbuf "unterminated string" 
                                )
# 1272 "scan.ml"

  | 1 ->
# 288 "scan.mll"
                                ( fun map buf -> P.STR (Buffer.contents buf) 
                                  (* we are done *)
                                )
# 1279 "scan.ml"

  | 2 ->
# 294 "scan.mll"
                                ( fun map buf ->
                                  let s    = get lexbuf              in
                                  ( Buffer.add_string buf s
                                  ; string lexbuf map buf
                                  )
                                )
# 1289 "scan.ml"

  | 3 ->
# 300 "scan.mll"
                                ( fun map buf -> 
                                  let i = escape lexbuf in
                                  if i >= 256 then
                                    error lexbuf "character literal too large"
                                  else
                                    ( Buffer.add_char buf (Char.chr(i))
                                    ; string lexbuf map buf
                                    )
                                )
# 1302 "scan.ml"

  | 4 ->
# 309 "scan.mll"
                                ( fun map buf ->
                                  error lexbuf "illegal character in string"
                                )
# 1309 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and pragma1 lexbuf =
    __ocaml_lex_pragma1_rec lexbuf 104
and __ocaml_lex_pragma1_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 314 "scan.mll"
                        ( fun map -> P.EOF )
# 1320 "scan.ml"

  | 1 ->
# 315 "scan.mll"
                        ( fun map -> pragma1 lexbuf map )
# 1325 "scan.ml"

  | 2 ->
# 316 "scan.mll"
                        ( fun map -> tab lexbuf map; pragma1 lexbuf map )
# 1330 "scan.ml"

  | 3 ->
# 317 "scan.mll"
                        ( fun map -> nl lexbuf map;  pragma1 lexbuf map )
# 1335 "scan.ml"

  | 4 ->
# 318 "scan.mll"
                        ( fun map -> 
                          let s  = get lexbuf in 
                          try ( match keyword s with 
                              | _     -> pragma2 lexbuf map s
                              )
                          with Not_found -> pragma2 lexbuf map s
                        )
# 1346 "scan.ml"

  | 5 ->
# 325 "scan.mll"
                        ( fun map -> 
                          error lexbuf "id for pragma expected" 
                        )
# 1353 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_pragma1_rec lexbuf __ocaml_lex_state

and pragma2 lexbuf =
    __ocaml_lex_pragma2_rec lexbuf 111
and __ocaml_lex_pragma2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 331 "scan.mll"
                        ( fun map id -> 
                          error lexbuf "pragma body expected" 
                        )
# 1366 "scan.ml"

  | 1 ->
# 334 "scan.mll"
                        ( fun map id -> pragma2 lexbuf map id )
# 1371 "scan.ml"

  | 2 ->
# 335 "scan.mll"
                        ( fun map id -> tab lexbuf map; pragma2 lexbuf map id)
# 1376 "scan.ml"

  | 3 ->
# 336 "scan.mll"
                        ( fun map id -> nl  lexbuf map; pragma2 lexbuf map id)
# 1381 "scan.ml"

  | 4 ->
# 337 "scan.mll"
                        ( fun map id -> 
                          pragma3 lexbuf map 0 
                        )
# 1388 "scan.ml"

  | 5 ->
# 340 "scan.mll"
                        ( fun map id -> 
                          error lexbuf "pragma body expected" 
                        )
# 1395 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_pragma2_rec lexbuf __ocaml_lex_state

and pragma3 lexbuf =
    __ocaml_lex_pragma3_rec lexbuf 118
and __ocaml_lex_pragma3_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 345 "scan.mll"
                                ( fun map level ->
                                  error lexbuf "unterminated pragma" 
                                )
# 1408 "scan.ml"

  | 1 ->
# 349 "scan.mll"
                                ( fun map level ->
                                  pragma3 lexbuf map level
                                )
# 1415 "scan.ml"

  | 2 ->
# 352 "scan.mll"
                                ( fun map level ->
                                  nl lexbuf map
                                ; pragma3 lexbuf map level 
                                )
# 1423 "scan.ml"

  | 3 ->
# 356 "scan.mll"
                                ( fun map level -> 
                                  tab lexbuf map; pragma3 lexbuf map level
                                )
# 1430 "scan.ml"

  | 4 ->
# 359 "scan.mll"
                                ( fun map level -> 
                                  pragma3 lexbuf map (level+1)
                                )
# 1437 "scan.ml"

  | 5 ->
# 362 "scan.mll"
                                ( fun map level ->
                                  if   level = 0 
                                  then token lexbuf map
                                  else pragma3 lexbuf map (level-1)
                                )
# 1446 "scan.ml"

  | 6 ->
# 367 "scan.mll"
                                ( fun map -> pragma3 lexbuf map (* ignore *) )
# 1451 "scan.ml"

  | 7 ->
# 368 "scan.mll"
                                ( fun map level -> 
                                  ignore (comment1 lexbuf map) 
                                ; pragma3 lexbuf map level
                                )
# 1459 "scan.ml"

  | 8 ->
# 372 "scan.mll"
                                ( fun map level -> 
                                  ignore (string lexbuf map (Buffer.create 80))
                                ; pragma3 lexbuf map level
                                )
# 1467 "scan.ml"

  | 9 ->
# 376 "scan.mll"
                                ( fun map level -> 
                                  ignore (character lexbuf map)
                                ; pragma3 lexbuf map level
                                )
# 1475 "scan.ml"

  | 10 ->
# 381 "scan.mll"
                                ( fun map level ->
                                  pragma3 lexbuf map level 
                                )
# 1482 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_pragma3_rec lexbuf __ocaml_lex_state

and line lexbuf =
    __ocaml_lex_line_rec lexbuf 130
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 386 "scan.mll"
                        ( fun map l ->
                          error lexbuf "unterminated line directive" 
                        )
# 1495 "scan.ml"

  | 1 ->
# 389 "scan.mll"
                        ( fun map l -> line lexbuf map l )
# 1500 "scan.ml"

  | 2 ->
# 390 "scan.mll"
                        ( fun map l -> line lexbuf map l )
# 1505 "scan.ml"

  | 3 ->
# 391 "scan.mll"
                        ( fun map l ->
                          let buf      = Buffer.create 80 in
                          let _        = string lexbuf map buf in
                          let file     = Buffer.contents buf in
                          let pos      = Lexing.lexeme_start lexbuf in
                          let location = file, l-1, 1 in
                                ( Srcmap.sync map pos location
                                ; () (* return *)
                                )
                        )
# 1519 "scan.ml"

  | 4 ->
# 401 "scan.mll"
                        ( fun map l -> 
                          
                          (* inline'ing the l' expression caused an
                          int_of_string failure with ocamlopt *)
                          
                          let l' = int_of_string (get lexbuf)
                          in  line lexbuf map l'
                        )
# 1531 "scan.ml"

  | 5 ->
# 409 "scan.mll"
                        ( fun map l ->
                          line lexbuf map l
                        )
# 1538 "scan.ml"

  | 6 ->
# 412 "scan.mll"
                        ( fun map l -> 
                          error lexbuf 
                          "illegal character in line directive"
                        )
# 1546 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_rec lexbuf __ocaml_lex_state

;;

# 417 "scan.mll"
    (* start of epilog *)
    (*s: scanner entry point *)
    let scan map lexbuf =
        token lexbuf map
    (*e: scanner entry point *)
(*x: scan.mll *)
    let tok2str = function

    | P.ABORTS            -> "ABORTS"
    | P.ALIGN             -> "ALIGN"
    | P.ALIGNED           -> "ALIGNED"
    | P.ALSO              -> "ALSO"
    | P.AS                -> "AS"
    | P.COLON             -> "COLON"
    | P.CCOLON            -> "CCOLON"
    | P.COMMA             -> "COMMA"
    | P.CONST             -> "CONST"
    | P.CONTINUATION      -> "CONTINUATION"
    | P.CUT               -> "CUT"
    | P.CUTS              -> "CUTS"
    | P.ELSE              -> "ELSE"
    | P.EOF               -> "EOF"
    | P.EQUAL             -> "EQUAL"
    | P.EXPORT            -> "EXPORT"
    | P.FAILS             -> "FAILS"
    | P.FOREIGN           -> "FOREIGN"
    | P.GOTO              -> "GOTO"
    | P.IF                -> "IF"
    | P.IMPORT            -> "IMPORT"
    | P.IN                -> "IN"
    | P.INVARIANT         -> "INVARIANT"
    | P.JUMP              -> "JUMP"
    | P.LBRACE            -> "LBRACE"
    | P.LBRACKET          -> "LBRACKET"
    | P.LPAREN            -> "LPAREN"
    | P.NEVER             -> "NEVER"
    | P.PPERCENT          -> "PPERCENT"
    | P.PRAGMA            -> "PRAGMA"
    | P.RBRACE            -> "RBRACE"
    | P.RBRACKET          -> "RBRACKET"
    | P.READS             -> "READS"
    | P.REGISTER          -> "REGISTER"
    | P.RETURN            -> "RETURN"
    | P.RETURNS           -> "RETURNS"
    | P.RPAREN            -> "RPAREN"
    | P.SECTION           -> "SECTION"
    | P.SEMI              -> "SEMI"
    | P.SPAN              -> "SPAN"
    | P.STACKDATA         -> "STACKDATA"
    | P.TARGETS           -> "TARGETS"
    | P.TO                -> "TO"
    | P.UNICODE           -> "UNICODE"
    | P.UNWINDS           -> "UNWINDS"
    | P.WRITES            -> "WRITES"

    | P.TYPEDEF           -> "TYPEDEF" 
    | P.MEMSIZE           -> "MEMSIZE"
    | P.BYTEORDER         -> "BYTEORDER"
    | P.LIMITCHECK        -> "LIMITCHECK"
    | P.LITTLE            -> "LITTLE"
    | P.BIG               -> "BIG"
    | P.CASE              -> "CASE"
    | P.DEFAULT           -> "DEFAULT"
    | P.TARGET            -> "TARGET"
    | P.DOTDOT            -> "DOTDOT"
    | P.SWITCH            -> "SWITCH"

    | P.WRDSIZE           -> "WORSIZE"
    | P.PTRSIZE           -> "POINTERSIZE"
    | P.FLOATREPR         -> "FLOAT"
    | P.CHARSET           -> "CHARSET"
    

    | P.AMPERSAND(s)      -> "AMPERSAND(" ^ s ^ ")"
    | P.BAR(s)            -> "BAR(" ^       s ^ ")"
    | P.CARET(s)          -> "CARET(" ^     s ^ ")"
    | P.EEQ(s)            -> "EEQ(" ^       s ^ ")"
    | P.GEQ(s)            -> "GEQ(" ^       s ^ ")"
    | P.GGREATER(s)       -> "GGREATER(" ^  s ^ ")"
    | P.GT(s)             -> "GT(" ^        s ^ ")"
    | P.LEQ(s)            -> "LEQ(" ^       s ^ ")"
    | P.LLESS(s)          -> "LLESS(" ^     s ^ ")"
    | P.LT(s)             -> "LT(" ^        s ^ ")"
    | P.MINUS(s)          -> "MINUS(" ^     s ^ ")"
    | P.NEQ(s)            -> "NEQ(" ^       s ^ ")"
    | P.PERCENT(s)        -> "PERCENT(" ^   s ^ ")"
    | P.PLUS(s)           -> "PLUS(" ^      s ^ ")"
    | P.SLASH(s)          -> "SLASH(" ^     s ^ ")"
    | P.STAR(s)           -> "STAR(" ^      s ^ ")"
    | P.TILDE(s)          -> "TILDE(" ^     s ^ ")"
    | P.UMINUS(s)         -> "UMINUS" ^     s ^ ")"
    
    
    | P.ID(s)             -> "ID(" ^        s ^ ")"
    | P.STR(s)            -> "STR(" ^       String.escaped s ^ ")"
    | P.INFIXOP(s)        -> "INFIXOP(" ^   s ^ ")"
    | P.PRIMOP(s)         -> "PRIMOP(" ^    s ^ ")"
    | P.SINT(s)           -> "SINT(" ^       s ^ ")"
    | P.UINT(s)           -> "UINT(" ^       s ^ ")"
    | P.FLT(s)            -> "FLT(" ^       s ^ ")"
    | P.CHAR(i)           -> "CHAR(" ^ Char.escaped (Char.chr i) ^ ")"

    | P.BITSn(i)          -> "BITSn(" ^ string_of_int i ^ ")"


# 1658 "scan.ml"
