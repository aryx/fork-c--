type token =
  | ABORTS
  | ALIGN
  | ALIGNED
  | ALSO
  | AS
  | AMPERSAND of (string)
  | BIG
  | BYTEORDER
  | CASE
  | COLON
  | CCOLON
  | COMMA
  | CONST
  | CONTINUATION
  | CUT
  | CUTS
  | DEFAULT
  | DOTDOT
  | ELSE
  | EOF
  | EQUAL
  | EXPORT
  | FAILS
  | FOREIGN
  | GOTO
  | IF
  | IMPORT
  | IN
  | INFIXOP of (string)
  | INVARIANT
  | JUMP
  | LBRACE
  | LBRACKET
  | LIMITCHECK
  | LITTLE
  | LPAREN
  | MEMSIZE
  | NEVER
  | PPERCENT
  | RBRACE
  | RBRACKET
  | READS
  | REGISTER
  | RETURN
  | RETURNS
  | RPAREN
  | SECTION
  | SEMI
  | SPAN
  | STACKDATA
  | SWITCH
  | TARGET
  | TARGETS
  | TO
  | TYPEDEF
  | UNICODE
  | UNWINDS
  | WRITES
  | WRDSIZE
  | PTRSIZE
  | FLOATREPR
  | CHARSET
  | PRAGMA
  | EEQ of (string)
  | NEQ of (string)
  | LT of (string)
  | LEQ of (string)
  | GT of (string)
  | GEQ of (string)
  | BAR of (string)
  | CARET of (string)
  | LLESS of (string)
  | GGREATER of (string)
  | PLUS of (string)
  | MINUS of (string)
  | PERCENT of (string)
  | STAR of (string)
  | SLASH of (string)
  | TILDE of (string)
  | UMINUS of (string)
  | PRIMOP of (string)
  | ID of (string)
  | STR of (string)
  | BITSn of (int)
  | SINT of (string)
  | UINT of (string)
  | FLT of (string)
  | CHAR of (int)

open Parsing;;
# 3 "parse.mly"
    module A = Ast
    module E = Error

(* pad: syncweb does not support multi-lang; can't have special comments for
 * yacc (C) and OCaml so have to inline the ocaml code here manually
 *)
let p  ()  = (Parsing.symbol_start (), Parsing.symbol_end())
let pn n   = (Parsing.rhs_start n, Parsing.rhs_end n)
let px ()  = (Parsing.symbol_start ())

let rev    = List.rev

let dep msg =
  let deprecated = Reinit.ref false in
  fun x ->
    if not (!deprecated) then
      begin
        Printf.eprintf "C-- warning: %s\n" msg;
        deprecated := true;
      end;
    x

let rdep = dep "Use of 'register' keyword is deprecated"
let noeqdep = dep "Hardware register name without '=' is deprecated"

let str2uint str =
  let b = Bits.U.of_string str Nativeint.size in
  try Bits.U.to_int b with Bits.Overflow ->
    Error.errorf "constant %s overflows %d-bit native integer" str (Nativeint.size-1)

# 124 "parse.ml"
let yytransl_const = [|
  257 (* ABORTS *);
  258 (* ALIGN *);
  259 (* ALIGNED *);
  260 (* ALSO *);
  261 (* AS *);
  263 (* BIG *);
  264 (* BYTEORDER *);
  265 (* CASE *);
  266 (* COLON *);
  267 (* CCOLON *);
  268 (* COMMA *);
  269 (* CONST *);
  270 (* CONTINUATION *);
  271 (* CUT *);
  272 (* CUTS *);
  273 (* DEFAULT *);
  274 (* DOTDOT *);
  275 (* ELSE *);
    0 (* EOF *);
  276 (* EQUAL *);
  277 (* EXPORT *);
  278 (* FAILS *);
  279 (* FOREIGN *);
  280 (* GOTO *);
  281 (* IF *);
  282 (* IMPORT *);
  283 (* IN *);
  285 (* INVARIANT *);
  286 (* JUMP *);
  287 (* LBRACE *);
  288 (* LBRACKET *);
  289 (* LIMITCHECK *);
  290 (* LITTLE *);
  291 (* LPAREN *);
  292 (* MEMSIZE *);
  293 (* NEVER *);
  294 (* PPERCENT *);
  295 (* RBRACE *);
  296 (* RBRACKET *);
  297 (* READS *);
  298 (* REGISTER *);
  299 (* RETURN *);
  300 (* RETURNS *);
  301 (* RPAREN *);
  302 (* SECTION *);
  303 (* SEMI *);
  304 (* SPAN *);
  305 (* STACKDATA *);
  306 (* SWITCH *);
  307 (* TARGET *);
  308 (* TARGETS *);
  309 (* TO *);
  310 (* TYPEDEF *);
  311 (* UNICODE *);
  312 (* UNWINDS *);
  313 (* WRITES *);
  314 (* WRDSIZE *);
  315 (* PTRSIZE *);
  316 (* FLOATREPR *);
  317 (* CHARSET *);
  318 (* PRAGMA *);
    0|]

let yytransl_block = [|
  262 (* AMPERSAND *);
  284 (* INFIXOP *);
  319 (* EEQ *);
  320 (* NEQ *);
  321 (* LT *);
  322 (* LEQ *);
  323 (* GT *);
  324 (* GEQ *);
  325 (* BAR *);
  326 (* CARET *);
  327 (* LLESS *);
  328 (* GGREATER *);
  329 (* PLUS *);
  330 (* MINUS *);
  331 (* PERCENT *);
  332 (* STAR *);
  333 (* SLASH *);
  334 (* TILDE *);
  335 (* UMINUS *);
  336 (* PRIMOP *);
  337 (* ID *);
  338 (* STR *);
  339 (* BITSn *);
  340 (* SINT *);
  341 (* UINT *);
  342 (* FLT *);
  343 (* CHAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\004\000\005\000\
\005\000\008\000\009\000\009\000\009\000\009\000\007\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\020\000\020\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\019\000\019\000\011\000\023\000\
\010\000\010\000\010\000\026\000\026\000\027\000\028\000\028\000\
\028\000\028\000\013\000\013\000\031\000\031\000\031\000\031\000\
\033\000\033\000\025\000\025\000\025\000\006\000\006\000\036\000\
\037\000\037\000\038\000\039\000\039\000\039\000\035\000\035\000\
\043\000\043\000\042\000\045\000\045\000\044\000\047\000\047\000\
\046\000\049\000\050\000\050\000\051\000\051\000\052\000\052\000\
\054\000\055\000\055\000\056\000\056\000\048\000\040\000\057\000\
\057\000\034\000\058\000\059\000\060\000\060\000\060\000\060\000\
\060\000\061\000\061\000\062\000\062\000\063\000\064\000\064\000\
\066\000\066\000\066\000\067\000\068\000\068\000\068\000\070\000\
\069\000\069\000\071\000\071\000\072\000\072\000\072\000\053\000\
\053\000\074\000\074\000\075\000\075\000\076\000\077\000\077\000\
\024\000\014\000\014\000\073\000\078\000\078\000\041\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\081\000\081\000\082\000\082\000\084\000\084\000\
\085\000\085\000\085\000\086\000\086\000\083\000\083\000\087\000\
\088\000\022\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\090\000\090\000\017\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\029\000\091\000\091\000\016\000\092\000\092\000\092\000\
\092\000\015\000\093\000\093\000\093\000\093\000\018\000\094\000\
\094\000\065\000\065\000\032\000\032\000\030\000\000\000"

let yylen = "\002\000\
\001\000\002\000\000\000\001\000\005\000\001\000\001\000\002\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\002\000\004\000\003\000\004\000\003\000\004\000\003\000\005\000\
\006\000\004\000\003\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\000\000\006\000\001\000\
\002\000\003\000\004\000\001\000\000\000\001\000\003\000\002\000\
\001\000\001\000\004\000\003\000\005\000\003\000\003\000\001\000\
\000\000\001\000\003\000\002\000\000\000\004\000\003\000\003\000\
\002\000\000\000\001\000\001\000\001\000\001\000\003\000\002\000\
\003\000\002\000\002\000\003\000\001\000\002\000\003\000\001\000\
\001\000\006\000\001\000\000\000\001\000\000\000\001\000\000\000\
\003\000\002\000\001\000\003\000\001\000\003\000\004\000\002\000\
\000\000\002\000\002\000\001\000\004\000\004\000\004\000\002\000\
\002\000\002\000\000\000\002\000\000\000\001\000\002\000\002\000\
\002\000\002\000\000\000\001\000\001\000\002\000\003\000\001\000\
\001\000\005\000\001\000\001\000\002\000\003\000\000\000\000\000\
\001\000\000\000\002\000\001\000\003\000\002\000\003\000\001\000\
\001\000\001\000\001\000\001\000\005\000\000\000\001\000\001\000\
\002\000\004\000\004\000\008\000\006\000\008\000\006\000\007\000\
\005\000\007\000\005\000\003\000\005\000\004\000\006\000\006\000\
\004\000\005\000\004\000\006\000\005\000\004\000\003\000\005\000\
\004\000\006\000\003\000\000\000\003\000\000\000\001\000\003\000\
\001\000\002\000\000\000\003\000\001\000\002\000\000\000\001\000\
\004\000\001\000\002\000\002\000\002\000\002\000\001\000\001\000\
\003\000\002\000\000\000\001\000\001\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\003\000\001\000\002\000\005\000\003\000\003\000\
\001\000\002\000\005\000\003\000\003\000\001\000\002\000\003\000\
\001\000\001\000\000\000\001\000\000\000\004\000\002\000"

let yydefred = "\000\000\
\003\000\000\000\239\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\140\000\
\002\000\004\000\006\000\007\000\015\000\000\000\137\000\000\000\
\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\226\000\000\000\225\000\000\000\023\000\
\000\000\221\000\000\000\016\000\019\000\009\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\037\000\233\000\000\000\
\000\000\072\000\083\000\000\000\000\000\077\000\081\000\000\000\
\066\000\063\000\000\000\058\000\000\000\000\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\120\000\191\000\000\000\123\000\196\000\197\000\
\000\000\229\000\020\000\000\000\224\000\022\000\223\000\000\000\
\018\000\000\000\031\000\032\000\028\000\029\000\030\000\036\000\
\035\000\033\000\034\000\026\000\000\000\231\000\071\000\000\000\
\075\000\085\000\000\000\000\000\051\000\055\000\000\000\062\000\
\000\000\217\000\216\000\000\000\198\000\000\000\187\000\188\000\
\189\000\190\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\011\000\014\000\008\000\010\000\
\012\000\013\000\000\000\232\000\076\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\
\144\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\000\000\065\000\067\000\069\000\070\000\136\000\116\000\000\000\
\000\000\000\000\000\000\143\000\000\000\000\000\193\000\074\000\
\000\000\000\000\080\000\000\000\194\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\201\000\202\000\203\000\000\000\025\000\
\227\000\222\000\000\000\192\000\000\000\186\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\000\000\000\000\000\000\
\145\000\118\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\000\000\000\053\000\073\000\000\000\078\000\000\000\
\000\000\000\000\000\000\042\000\000\000\060\000\000\000\000\000\
\000\000\049\000\000\000\044\000\046\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\107\000\000\000\167\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\119\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\135\000\117\000\115\000\079\000\094\000\000\000\000\000\000\000\
\125\000\122\000\009\000\059\000\048\000\000\000\000\000\043\000\
\082\000\236\000\091\000\000\000\093\000\000\000\000\000\107\000\
\108\000\158\000\000\000\000\000\163\000\000\000\161\000\000\000\
\000\000\169\000\146\000\095\000\000\000\040\000\096\000\000\000\
\000\000\173\000\183\000\000\000\000\000\107\000\166\000\000\000\
\115\000\000\000\147\000\000\000\000\000\000\000\000\000\218\000\
\000\000\000\000\000\000\126\000\131\000\000\000\047\000\000\000\
\000\000\000\000\000\000\090\000\000\000\157\000\165\000\000\000\
\000\000\000\000\153\000\106\000\100\000\000\000\000\000\000\000\
\000\000\162\000\000\000\168\000\000\000\107\000\000\000\000\000\
\115\000\000\000\000\000\155\000\000\000\113\000\114\000\110\000\
\133\000\039\000\238\000\089\000\159\000\092\000\160\000\104\000\
\000\000\000\000\000\000\105\000\141\000\000\000\170\000\182\000\
\184\000\164\000\149\000\151\000\000\000\107\000\115\000\000\000\
\234\000\111\000\112\000\000\000\000\000\000\000\181\000\000\000\
\000\000\152\000\000\000\000\000\154\000\101\000\103\000\102\000\
\000\000\000\000\148\000\150\000\185\000\180\000"

let yydgoto = "\002\000\
\003\000\004\000\017\000\018\000\122\000\181\000\182\000\183\000\
\184\000\185\000\186\000\021\000\022\000\023\000\031\000\037\000\
\208\000\201\001\044\000\127\000\078\000\253\000\119\001\024\000\
\001\001\043\001\044\001\045\001\075\001\046\001\051\000\060\000\
\093\000\025\000\047\000\090\000\140\000\210\000\211\000\212\000\
\213\000\084\000\149\000\225\000\085\000\086\000\226\000\227\000\
\087\000\088\000\139\000\191\000\067\001\101\001\102\001\103\001\
\062\001\068\001\156\001\157\001\112\001\051\001\175\001\176\001\
\202\001\138\001\214\000\215\000\107\000\108\000\109\000\035\001\
\110\000\089\001\087\001\218\000\219\000\011\001\220\000\111\000\
\056\001\015\001\160\001\064\001\208\001\209\001\192\001\193\001\
\112\000\151\000\078\001\038\000\032\000\081\000"

let yysindex = "\172\000\
\000\000\000\000\000\000\197\004\158\255\188\255\229\254\114\000\
\054\000\161\000\066\255\000\000\001\000\156\255\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\255\000\000\138\255\
\162\255\000\000\203\255\184\255\200\255\192\255\229\255\020\000\
\000\000\000\000\051\000\224\254\015\000\061\000\161\000\000\000\
\019\000\027\000\059\000\033\000\037\000\250\254\094\000\138\255\
\000\000\129\000\143\000\156\255\183\002\136\000\091\000\200\255\
\131\000\000\000\142\000\000\000\146\000\000\000\170\000\000\000\
\209\255\000\000\177\000\000\000\000\000\000\000\022\255\049\000\
\000\000\049\000\049\000\149\000\150\000\000\000\000\000\182\000\
\222\000\000\000\000\000\192\000\228\000\000\000\000\000\216\000\
\000\000\000\000\143\000\000\000\168\000\180\000\000\000\094\000\
\183\002\183\002\183\002\227\000\000\000\253\000\253\000\253\000\
\253\000\128\003\000\000\000\000\246\000\000\000\000\000\000\000\
\183\002\000\000\000\000\015\001\000\000\000\000\000\000\022\001\
\000\000\212\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\203\000\000\000\000\000\207\000\
\000\000\000\000\248\000\056\001\000\000\000\000\129\000\000\000\
\143\003\000\000\000\000\009\255\000\000\001\000\000\000\000\000\
\000\000\000\000\183\002\183\002\000\000\183\002\183\002\183\002\
\183\002\183\002\183\002\183\002\183\002\183\002\183\002\183\002\
\183\002\183\002\183\002\183\002\183\002\215\003\210\000\215\000\
\049\000\000\000\009\004\038\255\000\000\000\000\000\000\000\000\
\000\000\000\000\254\254\000\000\000\000\000\000\001\000\217\000\
\249\000\183\002\183\002\183\002\183\002\218\000\000\000\232\000\
\000\000\009\004\013\001\016\001\026\000\006\000\000\000\091\004\
\237\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\001\037\001\000\000\227\000\224\000\000\000\000\000\
\028\001\062\001\000\000\183\002\000\000\177\001\132\004\175\255\
\175\255\175\255\175\255\175\255\175\255\207\255\159\255\196\000\
\196\000\002\000\002\000\000\000\000\000\000\000\123\001\000\000\
\000\000\000\000\029\001\000\000\183\002\000\000\000\000\143\002\
\185\255\002\001\049\001\183\002\241\003\159\003\041\003\041\004\
\227\000\009\004\140\255\009\004\000\000\183\002\183\002\049\000\
\000\000\000\000\084\001\183\002\007\001\232\000\227\000\105\000\
\175\000\000\000\038\001\000\000\000\000\207\000\000\000\234\001\
\011\001\066\001\057\001\000\000\010\004\000\000\060\004\186\001\
\061\001\000\000\053\001\000\000\000\000\000\000\084\001\010\255\
\227\000\037\000\054\001\083\001\038\001\067\001\060\001\069\001\
\000\000\032\001\000\000\070\001\094\000\026\255\101\001\080\001\
\091\001\000\000\000\000\000\000\041\003\227\000\225\255\038\001\
\042\001\091\004\077\001\023\002\227\000\113\001\084\001\046\001\
\000\000\000\000\000\000\000\000\000\000\120\001\084\001\011\001\
\000\000\000\000\000\000\000\000\000\000\094\001\065\001\000\000\
\000\000\000\000\000\000\068\001\000\000\090\001\136\001\000\000\
\000\000\000\000\094\000\106\001\000\000\183\002\000\000\048\255\
\009\004\000\000\000\000\000\000\148\001\000\000\000\000\127\001\
\183\002\000\000\000\000\038\001\115\001\000\000\000\000\116\001\
\000\000\227\000\000\000\086\001\227\000\038\001\183\002\000\000\
\084\001\252\255\011\001\000\000\000\000\226\000\000\000\126\001\
\084\001\155\001\207\000\000\000\217\255\000\000\000\000\091\004\
\154\255\124\001\000\000\000\000\000\000\105\001\000\000\129\255\
\128\001\000\000\010\000\000\000\003\000\000\000\227\000\038\001\
\000\000\091\004\037\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\130\001\149\001\150\001\000\000\000\000\183\002\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\008\000\
\000\000\000\000\000\000\037\000\037\000\037\000\000\000\166\001\
\165\001\000\000\147\000\111\000\000\000\000\000\000\000\000\000\
\094\000\183\002\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\184\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\001\000\000\025\255\000\000\000\000\154\001\
\000\000\023\255\000\000\000\000\000\000\154\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\143\255\000\000\000\000\
\000\000\006\255\154\001\000\000\000\000\000\000\000\000\098\255\
\000\000\000\000\157\001\000\000\000\000\000\000\000\000\000\000\
\157\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\189\000\000\000\000\000\000\000\162\001\000\000\000\000\101\255\
\000\000\000\000\154\001\000\000\000\000\157\001\000\000\000\000\
\000\000\000\000\000\000\216\001\036\000\135\000\135\000\135\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\124\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\244\000\000\000\000\000\172\255\
\000\000\000\000\088\000\000\000\000\000\000\000\015\255\000\000\
\000\000\000\000\000\000\236\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\095\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\227\255\
\000\000\000\000\000\000\061\003\247\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\138\002\
\012\255\000\000\188\001\000\000\114\004\000\000\000\000\000\000\
\000\000\162\001\000\000\000\000\000\000\102\005\173\005\060\006\
\086\006\112\006\138\006\164\006\190\006\238\005\170\005\218\004\
\032\005\053\002\125\002\000\000\000\000\000\000\170\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\173\001\000\000\000\000\000\000\176\001\000\000\176\001\180\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\255\000\000\000\000\227\255\114\004\000\000\
\204\001\000\000\071\001\000\000\000\000\014\003\000\000\134\255\
\000\000\189\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\255\002\255\
\114\004\000\000\000\000\131\001\176\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\210\002\000\000\
\114\004\000\000\000\000\000\000\176\001\000\000\000\000\071\001\
\000\000\030\255\000\000\000\000\056\003\150\255\112\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\255\190\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\162\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\145\255\000\000\000\000\099\000\
\000\000\000\000\000\000\176\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\114\004\071\001\157\255\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\134\255\000\000\013\255\000\000\000\000\000\000\000\000\184\001\
\000\000\000\000\000\000\000\000\000\000\000\000\225\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\001\
\000\000\181\255\074\001\000\000\074\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\222\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\223\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\225\001\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\145\001\235\002\013\000\000\000\
\000\000\179\001\000\000\000\000\198\000\159\001\212\002\209\002\
\218\255\211\255\000\000\195\255\000\000\070\255\000\000\245\255\
\000\000\000\000\000\000\000\000\206\001\000\000\211\002\239\255\
\114\002\142\255\206\002\168\255\000\000\000\000\000\000\000\000\
\000\000\000\000\092\255\000\000\000\000\129\002\000\000\244\001\
\000\000\119\255\000\000\000\000\255\254\129\001\000\000\000\000\
\000\000\075\255\158\254\000\000\171\254\018\255\000\000\000\000\
\102\001\165\254\252\001\000\000\139\255\000\000\000\000\000\000\
\253\255\000\000\201\254\000\000\000\000\000\002\000\000\136\255\
\000\000\000\000\000\000\244\254\000\000\000\000\000\000\000\000\
\086\255\183\001\000\000\000\000\000\000\000\000"

let yytablesize = 2034
let yytable = "\080\000\
\026\000\026\000\026\000\048\000\026\000\026\000\026\000\144\000\
\254\000\026\000\228\000\026\000\128\000\129\000\106\000\012\001\
\020\000\056\000\149\001\221\000\066\000\098\001\216\000\018\001\
\054\001\209\000\054\000\177\000\123\000\000\001\085\001\254\000\
\141\001\095\000\225\000\026\000\230\000\165\001\082\000\174\001\
\163\001\220\000\128\000\123\000\083\001\097\001\237\000\255\000\
\062\000\035\000\128\000\153\001\056\000\224\000\033\000\124\000\
\027\001\236\000\145\000\146\000\147\000\054\000\132\000\134\000\
\116\001\034\001\174\001\137\000\220\000\225\000\108\001\230\000\
\046\000\141\000\174\000\083\000\220\000\200\001\050\000\058\001\
\197\001\061\001\084\000\177\001\154\001\140\001\125\001\057\000\
\023\001\129\001\083\000\083\000\138\000\084\000\155\001\254\000\
\057\000\254\000\053\001\132\000\057\001\174\001\060\001\139\000\
\139\000\139\000\117\001\212\001\016\000\230\000\187\000\139\000\
\211\001\174\001\072\001\251\000\230\000\231\000\026\000\232\000\
\233\000\234\000\235\000\236\000\237\000\238\000\239\000\240\000\
\241\000\242\000\243\000\244\000\245\000\246\000\247\000\228\000\
\217\000\190\001\229\000\049\001\104\001\161\001\086\000\180\001\
\230\000\128\000\026\000\043\000\228\000\063\001\065\001\169\001\
\207\000\018\001\184\001\005\001\006\001\007\001\008\001\077\001\
\124\001\126\001\128\001\082\001\155\000\076\001\100\001\191\001\
\134\001\185\001\228\000\084\000\001\000\052\001\148\000\139\000\
\139\000\207\001\128\000\002\001\155\000\086\000\158\001\086\000\
\084\000\199\001\059\001\026\000\237\000\032\001\046\000\139\000\
\219\000\049\000\048\000\236\000\237\000\186\001\254\000\139\000\
\084\000\026\001\026\000\236\000\055\000\222\001\041\000\042\000\
\031\001\187\001\066\001\133\001\155\000\084\000\037\001\040\001\
\236\000\039\001\050\000\219\000\153\001\166\001\053\000\084\000\
\168\001\084\000\139\000\219\000\115\001\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\067\000\069\001\027\000\041\001\
\016\000\074\001\052\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\084\000\154\001\084\000\153\001\
\159\001\074\001\198\001\148\000\105\001\142\000\153\001\183\001\
\054\000\100\001\042\001\153\001\029\000\153\001\016\000\127\001\
\056\000\142\000\150\001\058\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\016\001\128\000\099\001\059\000\
\154\001\119\000\120\000\017\001\171\001\128\000\121\000\154\001\
\071\000\121\000\172\001\171\001\154\001\121\000\154\001\121\000\
\171\001\196\001\120\001\153\001\173\001\121\000\213\001\061\000\
\195\001\121\000\026\000\173\001\136\001\064\000\121\000\121\000\
\173\001\068\000\121\000\124\000\072\000\063\001\121\000\152\001\
\065\000\069\000\121\000\121\000\170\000\171\000\172\000\073\000\
\121\000\040\000\121\000\016\000\154\001\148\001\019\001\121\000\
\016\000\070\000\074\000\075\000\076\000\077\000\210\001\039\000\
\170\001\063\001\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\153\001\121\000\121\000\079\000\121\000\121\000\
\121\000\121\000\121\000\121\000\089\000\139\000\139\000\007\000\
\221\001\061\000\187\000\121\000\125\000\126\000\040\000\015\000\
\016\000\195\000\026\000\097\000\195\000\139\000\073\001\124\000\
\195\000\061\000\195\000\154\001\092\000\139\000\153\001\171\001\
\195\000\061\000\094\000\113\000\195\000\220\001\214\001\215\001\
\216\001\195\000\195\000\028\000\030\000\195\000\036\000\173\001\
\088\000\195\000\088\000\045\000\114\000\195\000\195\000\139\000\
\139\000\115\000\098\000\195\000\061\000\195\000\099\000\154\001\
\100\000\101\000\195\000\016\000\102\000\103\000\104\000\105\000\
\237\000\219\001\034\000\035\000\016\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\177\000\195\000\195\000\
\118\000\195\000\195\000\195\000\195\000\195\000\116\000\121\000\
\005\000\237\000\117\000\177\000\132\000\237\000\130\000\131\000\
\006\000\133\000\007\000\237\000\135\000\008\000\005\000\136\000\
\009\000\040\000\015\000\016\000\138\000\237\000\006\000\236\000\
\007\000\142\000\178\000\008\000\121\000\010\000\009\000\079\001\
\080\001\016\000\121\000\179\000\143\000\148\000\012\000\150\000\
\178\001\013\000\121\000\010\000\168\000\169\000\170\000\171\000\
\172\000\179\000\121\000\175\000\012\000\173\000\124\000\013\000\
\236\000\121\000\176\000\188\000\236\000\152\000\153\000\154\000\
\083\000\190\000\236\000\249\000\180\000\015\000\016\000\250\000\
\010\001\003\001\009\001\013\001\236\000\004\001\024\001\014\001\
\025\001\028\001\180\000\015\000\016\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\005\000\192\000\193\000\139\000\
\029\001\030\001\109\000\036\001\006\000\235\000\007\000\194\000\
\195\000\008\000\047\001\048\001\009\000\196\000\016\001\070\001\
\197\000\050\001\097\000\086\001\088\001\198\000\199\000\095\001\
\090\001\010\000\200\000\096\001\106\001\107\001\201\000\202\000\
\203\000\204\000\012\000\109\000\113\001\013\000\235\000\109\000\
\110\001\109\001\235\000\111\001\114\001\109\000\121\001\122\001\
\235\000\123\001\130\001\131\001\135\001\016\001\137\001\109\000\
\155\000\098\000\235\000\139\001\143\001\099\000\146\001\100\000\
\205\000\206\000\016\000\102\000\103\000\104\000\105\000\156\000\
\156\000\156\000\144\001\147\001\145\001\033\001\156\000\156\000\
\151\001\156\000\156\000\156\000\156\000\255\000\000\001\156\000\
\156\000\162\001\164\001\156\000\181\001\156\000\167\001\188\001\
\156\000\156\000\179\001\189\001\156\000\156\000\194\001\217\001\
\218\001\156\000\156\000\156\000\156\000\156\000\204\001\001\000\
\156\000\158\000\159\000\160\000\161\000\162\000\163\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\
\237\000\205\001\206\001\236\000\156\000\139\000\237\000\237\000\
\156\000\127\000\156\000\156\000\156\000\156\000\156\000\156\000\
\156\000\156\000\192\000\045\000\097\000\192\000\109\000\236\000\
\093\001\192\000\172\000\192\000\130\000\128\000\171\000\179\000\
\177\000\192\000\178\000\142\001\016\001\192\000\019\000\155\000\
\118\001\057\000\192\000\192\000\063\000\094\001\192\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\192\000\192\000\
\222\000\096\000\091\000\098\000\192\000\156\000\192\000\099\000\
\189\000\100\000\101\000\192\000\016\000\102\000\103\000\104\000\
\105\000\084\001\203\001\182\001\081\001\071\001\192\000\192\000\
\192\000\192\000\192\000\192\000\192\000\192\000\192\000\192\000\
\192\000\192\000\192\000\192\000\192\000\000\000\000\000\000\000\
\158\000\159\000\160\000\161\000\162\000\163\000\164\000\165\000\
\166\000\167\000\168\000\169\000\170\000\171\000\172\000\199\000\
\000\000\097\000\199\000\000\000\132\001\000\000\199\000\000\000\
\199\000\000\000\000\000\000\000\000\000\000\000\199\000\000\000\
\000\000\000\000\199\000\000\000\000\000\000\000\000\000\199\000\
\199\000\000\000\000\000\199\000\000\000\000\000\000\000\199\000\
\000\000\000\000\000\000\199\000\199\000\000\000\000\000\000\000\
\098\000\199\000\000\000\199\000\099\000\000\000\100\000\101\000\
\199\000\016\000\102\000\103\000\104\000\105\000\000\000\000\000\
\000\000\000\000\000\000\199\000\199\000\199\000\199\000\199\000\
\199\000\199\000\199\000\199\000\199\000\199\000\199\000\200\000\
\000\000\000\000\200\000\000\000\000\000\000\000\200\000\000\000\
\200\000\000\000\000\000\000\000\000\000\000\000\200\000\120\000\
\000\000\000\000\200\000\000\000\000\000\117\000\000\000\200\000\
\200\000\000\000\000\000\200\000\000\000\117\000\000\000\200\000\
\000\000\000\000\000\000\200\000\200\000\120\000\000\000\000\000\
\000\000\200\000\000\000\200\000\120\000\000\000\000\000\000\000\
\200\000\097\000\000\000\000\000\000\000\000\000\038\001\000\000\
\000\000\000\000\000\000\200\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\200\000\200\000\200\000\000\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\196\000\
\098\000\097\000\000\000\175\000\099\000\175\000\100\000\101\000\
\000\000\016\000\102\000\103\000\104\000\105\000\196\000\000\000\
\000\000\000\000\176\000\000\000\176\000\196\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\000\000\000\000\000\196\000\000\000\000\000\000\000\
\098\000\000\000\000\000\000\000\099\000\000\000\100\000\101\000\
\176\000\016\000\102\000\103\000\104\000\105\000\084\000\000\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\155\000\000\000\
\084\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\000\000\084\000\236\000\084\000\084\000\196\000\084\000\084\000\
\084\000\084\000\084\000\196\000\156\000\000\000\000\000\000\000\
\000\000\000\000\000\000\148\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\196\000\000\000\000\000\000\000\084\000\
\000\000\000\000\000\000\084\000\050\001\084\000\084\000\174\000\
\084\000\084\000\084\000\084\000\084\000\000\000\196\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\155\000\174\000\000\000\
\000\000\000\000\174\000\000\000\174\000\174\000\000\000\174\000\
\174\000\174\000\174\000\174\000\155\000\000\000\000\000\000\000\
\000\000\000\000\000\000\156\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\155\000\000\000\000\000\000\000\
\000\000\000\000\156\000\000\000\000\000\000\000\157\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\000\223\000\000\000\089\000\158\000\159\000\
\160\000\161\000\162\000\163\000\164\000\165\000\166\000\167\000\
\168\000\169\000\170\000\171\000\172\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\155\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\000\000\000\000\000\000\000\155\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\248\000\000\000\000\000\
\000\000\000\000\000\000\000\000\156\000\000\000\000\000\155\000\
\000\000\000\000\000\000\000\000\000\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\050\001\156\000\000\000\000\000\
\091\001\000\000\000\000\097\000\000\000\000\000\155\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\055\001\000\000\
\000\000\155\000\000\000\000\000\156\000\000\000\000\000\000\000\
\158\000\159\000\160\000\161\000\162\000\163\000\164\000\165\000\
\166\000\167\000\168\000\169\000\170\000\171\000\172\000\156\000\
\252\000\101\000\000\000\016\000\102\000\103\000\104\000\105\000\
\155\000\000\000\000\000\092\001\000\000\000\000\000\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\156\000\196\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\163\000\
\164\000\165\000\166\000\167\000\168\000\169\000\170\000\171\000\
\172\000\155\000\000\000\000\000\000\000\196\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\158\000\159\000\160\000\161\000\162\000\163\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\163\000\
\164\000\165\000\166\000\167\000\168\000\169\000\170\000\171\000\
\172\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\007\000\204\000\000\000\008\000\204\000\
\000\000\009\000\000\000\204\000\000\000\204\000\000\000\000\000\
\000\000\000\000\000\000\204\000\000\000\000\000\010\000\204\000\
\000\000\000\000\011\000\000\000\204\000\204\000\000\000\012\000\
\204\000\000\000\013\000\000\000\204\000\000\000\000\000\000\000\
\204\000\204\000\000\000\000\000\000\000\000\000\204\000\000\000\
\204\000\000\000\000\000\000\000\000\000\204\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\015\000\016\000\
\204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
\204\000\204\000\205\000\000\000\000\000\205\000\000\000\000\000\
\000\000\205\000\000\000\205\000\000\000\000\000\000\000\000\000\
\000\000\205\000\000\000\000\000\000\000\205\000\000\000\000\000\
\000\000\000\000\205\000\205\000\000\000\000\000\205\000\000\000\
\000\000\000\000\205\000\000\000\000\000\000\000\205\000\205\000\
\000\000\000\000\000\000\000\000\205\000\000\000\205\000\000\000\
\000\000\000\000\000\000\205\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\205\000\205\000\
\205\000\205\000\205\000\205\000\205\000\205\000\205\000\205\000\
\208\000\000\000\000\000\208\000\000\000\000\000\000\000\208\000\
\000\000\208\000\000\000\000\000\000\000\000\000\000\000\208\000\
\000\000\000\000\000\000\208\000\000\000\000\000\000\000\000\000\
\208\000\208\000\000\000\000\000\208\000\000\000\000\000\000\000\
\208\000\000\000\000\000\000\000\208\000\208\000\000\000\000\000\
\000\000\000\000\208\000\000\000\208\000\000\000\000\000\000\000\
\000\000\208\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\208\000\208\000\208\000\208\000\
\208\000\208\000\208\000\208\000\206\000\000\000\000\000\215\000\
\000\000\000\000\000\000\206\000\000\000\206\000\215\000\000\000\
\215\000\000\000\000\000\206\000\000\000\000\000\215\000\206\000\
\000\000\000\000\215\000\000\000\206\000\206\000\000\000\215\000\
\206\000\000\000\000\000\215\000\206\000\000\000\000\000\215\000\
\206\000\206\000\000\000\215\000\215\000\000\000\206\000\000\000\
\206\000\215\000\000\000\215\000\000\000\206\000\000\000\000\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\206\000\206\000\206\000\206\000\206\000\206\000\206\000\206\000\
\207\000\000\000\000\000\000\000\000\000\000\000\000\000\207\000\
\000\000\207\000\000\000\000\000\000\000\000\000\000\000\207\000\
\000\000\000\000\000\000\207\000\000\000\000\000\000\000\000\000\
\207\000\207\000\020\001\000\000\207\000\000\000\000\000\097\000\
\207\000\000\000\021\001\000\000\207\000\207\000\000\000\022\001\
\000\000\000\000\207\000\000\000\207\000\000\000\000\000\000\000\
\000\000\207\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\207\000\207\000\207\000\207\000\
\207\000\207\000\207\000\000\000\000\000\000\000\098\000\000\000\
\000\000\000\000\099\000\000\000\100\000\101\000\209\000\016\000\
\102\000\103\000\104\000\105\000\000\000\209\000\000\000\209\000\
\000\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\
\000\000\209\000\000\000\000\000\000\000\000\000\209\000\209\000\
\210\000\000\000\209\000\000\000\000\000\000\000\209\000\210\000\
\000\000\210\000\209\000\209\000\000\000\000\000\000\000\210\000\
\209\000\000\000\209\000\210\000\000\000\000\000\000\000\209\000\
\210\000\210\000\211\000\000\000\210\000\000\000\000\000\000\000\
\210\000\211\000\000\000\211\000\210\000\210\000\000\000\000\000\
\000\000\211\000\210\000\000\000\210\000\211\000\000\000\000\000\
\000\000\210\000\211\000\211\000\212\000\000\000\211\000\000\000\
\000\000\000\000\211\000\212\000\000\000\212\000\211\000\211\000\
\000\000\000\000\000\000\212\000\211\000\000\000\211\000\212\000\
\000\000\000\000\000\000\211\000\212\000\212\000\214\000\000\000\
\212\000\000\000\000\000\000\000\212\000\214\000\000\000\214\000\
\212\000\212\000\000\000\000\000\000\000\214\000\212\000\000\000\
\212\000\214\000\000\000\000\000\000\000\212\000\214\000\214\000\
\213\000\000\000\214\000\000\000\000\000\000\000\214\000\213\000\
\000\000\213\000\214\000\214\000\000\000\000\000\000\000\213\000\
\214\000\000\000\214\000\213\000\000\000\000\000\000\000\214\000\
\213\000\213\000\000\000\000\000\213\000\000\000\000\000\000\000\
\213\000\000\000\000\000\000\000\213\000\213\000\000\000\000\000\
\000\000\000\000\213\000\000\000\213\000\000\000\000\000\000\000\
\000\000\213\000"

let yycheck = "\045\000\
\004\000\005\000\006\000\015\000\008\000\009\000\010\000\096\000\
\179\000\013\000\148\000\015\000\074\000\075\000\053\000\202\000\
\004\000\012\001\104\001\140\000\038\000\012\001\140\000\205\000\
\007\001\140\000\012\001\002\001\007\001\032\001\032\001\202\000\
\088\001\051\000\012\001\039\000\012\001\129\001\045\001\138\001\
\126\001\012\001\012\001\032\001\027\001\047\001\045\001\010\001\
\081\001\082\001\020\001\004\001\047\001\045\001\082\001\034\001\
\221\000\045\001\097\000\098\000\099\000\047\001\003\001\081\000\
\039\001\247\000\165\001\085\000\039\001\047\001\053\001\047\001\
\035\001\091\000\113\000\082\001\047\001\169\001\081\001\010\001\
\166\001\012\001\081\001\139\001\037\001\087\001\069\001\082\001\
\209\000\072\001\082\001\082\001\081\001\081\001\047\001\010\001\
\082\001\012\001\007\001\040\001\009\001\200\001\011\001\081\001\
\082\001\081\001\081\001\199\001\083\001\012\001\122\000\081\001\
\198\001\212\001\023\001\177\000\155\000\156\000\122\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\173\000\012\001\
\140\000\009\001\150\000\004\001\049\001\124\001\042\001\145\001\
\047\001\012\001\150\000\082\001\030\001\014\001\015\001\134\001\
\140\000\079\001\001\001\194\000\195\000\196\000\197\000\024\001\
\069\001\070\001\071\001\025\001\006\001\024\001\048\001\039\001\
\077\001\016\001\047\001\029\001\001\000\006\001\035\001\031\001\
\032\001\190\001\045\001\191\000\006\001\081\001\113\001\083\001\
\042\001\168\001\047\001\191\000\039\001\228\000\035\001\047\001\
\012\001\047\001\206\000\039\001\047\001\044\001\113\001\055\001\
\029\001\219\000\206\000\047\001\005\001\218\001\009\000\010\000\
\226\000\056\001\016\001\076\001\006\001\042\001\253\000\031\001\
\045\001\000\001\081\001\039\001\004\001\130\001\020\001\081\001\
\133\001\083\001\082\001\047\001\061\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\039\000\020\001\081\001\055\001\
\083\001\024\001\081\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\081\001\037\001\083\001\004\001\
\121\001\040\001\167\001\035\001\050\001\035\001\004\001\047\001\
\081\001\147\001\082\001\004\001\081\001\004\001\083\001\047\001\
\081\001\047\001\107\001\047\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\003\001\012\001\048\001\012\001\
\037\001\081\001\082\001\010\001\041\001\020\001\003\001\037\001\
\008\001\006\001\047\001\041\001\037\001\010\001\037\001\012\001\
\041\001\047\001\062\001\004\001\057\001\018\001\047\001\005\001\
\047\001\022\001\062\001\057\001\078\001\047\001\027\001\028\001\
\057\001\047\001\031\001\032\001\036\001\190\001\035\001\110\001\
\012\001\047\001\039\001\040\001\075\001\076\001\077\001\047\001\
\045\001\081\001\047\001\083\001\037\001\103\001\081\001\052\001\
\083\001\031\001\058\001\059\001\060\001\061\001\047\001\042\001\
\135\001\218\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\004\001\080\001\081\001\081\001\083\001\084\001\
\085\001\086\001\087\001\012\001\031\001\031\001\032\001\023\001\
\217\001\031\001\142\001\020\001\084\001\085\001\081\001\082\001\
\083\001\003\001\142\001\035\001\006\001\047\001\038\001\032\001\
\010\001\047\001\012\001\037\001\020\001\055\001\004\001\041\001\
\018\001\055\001\012\001\020\001\022\001\047\001\204\001\205\001\
\206\001\027\001\028\001\005\000\006\000\031\001\008\000\057\001\
\081\001\035\001\083\001\013\000\082\001\039\001\040\001\081\001\
\082\001\047\001\074\001\045\001\082\001\047\001\078\001\037\001\
\080\001\081\001\052\001\083\001\084\001\085\001\086\001\087\001\
\004\001\047\001\081\001\082\001\083\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\002\001\080\001\081\001\
\047\001\083\001\084\001\085\001\086\001\087\001\081\001\047\001\
\013\001\037\001\081\001\002\001\047\001\041\001\082\001\082\001\
\021\001\012\001\023\001\047\001\045\001\026\001\013\001\012\001\
\029\001\081\001\082\001\083\001\029\001\057\001\021\001\004\001\
\023\001\082\001\039\001\026\001\006\001\042\001\029\001\081\001\
\082\001\083\001\012\001\048\001\081\001\035\001\051\001\011\001\
\039\001\054\001\020\001\042\001\073\001\074\001\075\001\076\001\
\077\001\048\001\028\001\005\001\051\001\032\001\032\001\054\001\
\037\001\035\001\005\001\081\001\041\001\103\000\104\000\105\000\
\082\001\042\001\047\001\082\001\081\001\082\001\083\001\081\001\
\065\001\081\001\081\001\031\001\057\001\053\001\020\001\032\001\
\012\001\082\001\081\001\082\001\083\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\013\001\014\001\015\001\081\001\
\045\001\012\001\004\001\047\001\021\001\004\001\023\001\024\001\
\025\001\026\001\081\001\035\001\029\001\030\001\003\001\081\001\
\033\001\052\001\035\001\081\001\027\001\038\001\039\001\035\001\
\040\001\042\001\043\001\047\001\047\001\019\001\047\001\048\001\
\049\001\050\001\051\001\037\001\077\001\054\001\037\001\041\001\
\053\001\047\001\041\001\047\001\047\001\047\001\018\001\040\001\
\047\001\031\001\081\001\047\001\012\001\003\001\081\001\057\001\
\006\001\074\001\057\001\012\001\039\001\078\001\045\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\013\001\
\014\001\015\001\082\001\012\001\081\001\027\001\028\001\021\001\
\047\001\023\001\024\001\025\001\026\001\010\001\032\001\029\001\
\030\001\047\001\047\001\033\001\010\001\035\001\081\001\044\001\
\038\001\039\001\045\001\067\001\042\001\043\001\047\001\010\001\
\012\001\047\001\048\001\049\001\050\001\051\001\053\001\000\000\
\054\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\047\001\053\001\053\001\047\001\074\001\081\001\045\001\020\001\
\078\001\040\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\003\001\047\001\035\001\006\001\047\001\020\001\
\039\001\010\001\047\001\012\001\040\001\040\001\047\001\010\001\
\010\001\018\001\010\001\091\001\003\001\022\001\004\000\006\001\
\062\001\030\000\027\001\028\001\036\000\040\001\031\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\039\001\040\001\
\143\000\052\000\048\000\074\001\045\001\028\001\047\001\078\001\
\136\000\080\001\081\001\052\001\083\001\084\001\085\001\086\001\
\087\001\030\001\173\001\147\001\025\001\022\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\255\255\255\255\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\003\001\
\255\255\035\001\006\001\255\255\038\001\255\255\010\001\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\027\001\
\028\001\255\255\255\255\031\001\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\039\001\040\001\255\255\255\255\255\255\
\074\001\045\001\255\255\047\001\078\001\255\255\080\001\081\001\
\052\001\083\001\084\001\085\001\086\001\087\001\255\255\255\255\
\255\255\255\255\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\006\001\
\255\255\255\255\022\001\255\255\255\255\012\001\255\255\027\001\
\028\001\255\255\255\255\031\001\255\255\020\001\255\255\035\001\
\255\255\255\255\255\255\039\001\040\001\028\001\255\255\255\255\
\255\255\045\001\255\255\047\001\035\001\255\255\255\255\255\255\
\052\001\035\001\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\006\001\
\074\001\035\001\255\255\010\001\078\001\012\001\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\087\001\006\001\255\255\
\255\255\255\255\010\001\255\255\012\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\255\255\255\255\028\001\255\255\255\255\255\255\
\074\001\255\255\255\255\255\255\078\001\255\255\080\001\081\001\
\040\001\083\001\084\001\085\001\086\001\087\001\035\001\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\006\001\255\255\
\035\001\255\255\255\255\255\255\255\255\074\001\255\255\255\255\
\255\255\078\001\045\001\080\001\081\001\006\001\083\001\084\001\
\085\001\086\001\087\001\012\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\074\001\
\255\255\255\255\255\255\078\001\052\001\080\001\081\001\035\001\
\083\001\084\001\085\001\086\001\087\001\255\255\047\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\006\001\074\001\255\255\
\255\255\255\255\078\001\255\255\080\001\081\001\255\255\083\001\
\084\001\085\001\086\001\087\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\028\001\255\255\255\255\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\045\001\255\255\031\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\006\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\255\255\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\052\001\028\001\255\255\255\255\
\031\001\255\255\255\255\035\001\255\255\255\255\006\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\022\001\255\255\
\255\255\006\001\255\255\255\255\028\001\255\255\255\255\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\028\001\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\087\001\
\006\001\255\255\255\255\040\001\255\255\255\255\255\255\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\028\001\006\001\
\255\255\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\006\001\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\255\255\
\255\255\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\023\001\003\001\255\255\026\001\006\001\
\255\255\029\001\255\255\010\001\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\042\001\022\001\
\255\255\255\255\046\001\255\255\027\001\028\001\255\255\051\001\
\031\001\255\255\054\001\255\255\035\001\255\255\255\255\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\045\001\255\255\
\047\001\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\081\001\082\001\083\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\010\001\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\035\001\255\255\255\255\255\255\039\001\040\001\
\255\255\255\255\255\255\255\255\045\001\255\255\047\001\255\255\
\255\255\255\255\255\255\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\010\001\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\003\001\255\255\255\255\003\001\
\255\255\255\255\255\255\010\001\255\255\012\001\010\001\255\255\
\012\001\255\255\255\255\018\001\255\255\255\255\018\001\022\001\
\255\255\255\255\022\001\255\255\027\001\028\001\255\255\027\001\
\031\001\255\255\255\255\031\001\035\001\255\255\255\255\035\001\
\039\001\040\001\255\255\039\001\040\001\255\255\045\001\255\255\
\047\001\045\001\255\255\047\001\255\255\052\001\255\255\255\255\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\003\001\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\027\001\028\001\030\001\255\255\031\001\255\255\255\255\035\001\
\035\001\255\255\038\001\255\255\039\001\040\001\255\255\043\001\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\255\255\255\255\255\255\074\001\255\255\
\255\255\255\255\078\001\255\255\080\001\081\001\003\001\083\001\
\084\001\085\001\086\001\087\001\255\255\010\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\027\001\028\001\
\003\001\255\255\031\001\255\255\255\255\255\255\035\001\010\001\
\255\255\012\001\039\001\040\001\255\255\255\255\255\255\018\001\
\045\001\255\255\047\001\022\001\255\255\255\255\255\255\052\001\
\027\001\028\001\003\001\255\255\031\001\255\255\255\255\255\255\
\035\001\010\001\255\255\012\001\039\001\040\001\255\255\255\255\
\255\255\018\001\045\001\255\255\047\001\022\001\255\255\255\255\
\255\255\052\001\027\001\028\001\003\001\255\255\031\001\255\255\
\255\255\255\255\035\001\010\001\255\255\012\001\039\001\040\001\
\255\255\255\255\255\255\018\001\045\001\255\255\047\001\022\001\
\255\255\255\255\255\255\052\001\027\001\028\001\003\001\255\255\
\031\001\255\255\255\255\255\255\035\001\010\001\255\255\012\001\
\039\001\040\001\255\255\255\255\255\255\018\001\045\001\255\255\
\047\001\022\001\255\255\255\255\255\255\052\001\027\001\028\001\
\003\001\255\255\031\001\255\255\255\255\255\255\035\001\010\001\
\255\255\012\001\039\001\040\001\255\255\255\255\255\255\018\001\
\045\001\255\255\047\001\022\001\255\255\255\255\255\255\052\001\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\255\255\052\001"

let yynames_const = "\
  ABORTS\000\
  ALIGN\000\
  ALIGNED\000\
  ALSO\000\
  AS\000\
  BIG\000\
  BYTEORDER\000\
  CASE\000\
  COLON\000\
  CCOLON\000\
  COMMA\000\
  CONST\000\
  CONTINUATION\000\
  CUT\000\
  CUTS\000\
  DEFAULT\000\
  DOTDOT\000\
  ELSE\000\
  EOF\000\
  EQUAL\000\
  EXPORT\000\
  FAILS\000\
  FOREIGN\000\
  GOTO\000\
  IF\000\
  IMPORT\000\
  IN\000\
  INVARIANT\000\
  JUMP\000\
  LBRACE\000\
  LBRACKET\000\
  LIMITCHECK\000\
  LITTLE\000\
  LPAREN\000\
  MEMSIZE\000\
  NEVER\000\
  PPERCENT\000\
  RBRACE\000\
  RBRACKET\000\
  READS\000\
  REGISTER\000\
  RETURN\000\
  RETURNS\000\
  RPAREN\000\
  SECTION\000\
  SEMI\000\
  SPAN\000\
  STACKDATA\000\
  SWITCH\000\
  TARGET\000\
  TARGETS\000\
  TO\000\
  TYPEDEF\000\
  UNICODE\000\
  UNWINDS\000\
  WRITES\000\
  WRDSIZE\000\
  PTRSIZE\000\
  FLOATREPR\000\
  CHARSET\000\
  PRAGMA\000\
  "

let yynames_block = "\
  AMPERSAND\000\
  INFIXOP\000\
  EEQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  BAR\000\
  CARET\000\
  LLESS\000\
  GGREATER\000\
  PLUS\000\
  MINUS\000\
  PERCENT\000\
  STAR\000\
  SLASH\000\
  TILDE\000\
  UMINUS\000\
  PRIMOP\000\
  ID\000\
  STR\000\
  BITSn\000\
  SINT\000\
  UINT\000\
  FLT\000\
  CHAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'toplevels) in
    Obj.repr(
# 96 "parse.mly"
                                               ( rev _1)
# 1113 "parse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevels) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'toplevelAt) in
    Obj.repr(
# 98 "parse.mly"
                                               ( _2::_1 )
# 1121 "parse.ml"
               : 'toplevels))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parse.mly"
                                               ( []     )
# 1127 "parse.ml"
               : 'toplevels))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'toplevel) in
    Obj.repr(
# 101 "parse.mly"
                                               ( A.ToplevelAt(_1,p())       )
# 1134 "parse.ml"
               : 'toplevelAt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'sections) in
    Obj.repr(
# 102 "parse.mly"
                                                    ( A.Section(_2, rev _4) )
# 1142 "parse.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 103 "parse.mly"
                                               ( A.TopProcedure(_1)         )
# 1149 "parse.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declAt) in
    Obj.repr(
# 104 "parse.mly"
                                               ( A.TopDecl(_1)              )
# 1156 "parse.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sections) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sectionAt) in
    Obj.repr(
# 106 "parse.mly"
                                               ( _2 :: _1 )
# 1164 "parse.ml"
               : 'sections))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parse.mly"
                                               ( []       )
# 1170 "parse.ml"
               : 'sections))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'section) in
    Obj.repr(
# 109 "parse.mly"
                                               ( A.SectionAt(_1,p()) )
# 1177 "parse.ml"
               : 'sectionAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 110 "parse.mly"
                                               ( A.Procedure(_1)     )
# 1184 "parse.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'datum) in
    Obj.repr(
# 111 "parse.mly"
                                               ( A.Datum(_1)         )
# 1191 "parse.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'span) in
    Obj.repr(
# 112 "parse.mly"
                                               ( A.SSpan(_1)         )
# 1198 "parse.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declAt) in
    Obj.repr(
# 113 "parse.mly"
                                               ( A.Decl(_1)          )
# 1205 "parse.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 116 "parse.mly"
                                               ( A.DeclAt(_1,p()) )
# 1212 "parse.ml"
               : 'declAt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'registers) in
    Obj.repr(
# 118 "parse.mly"
                    ( A.Registers(mkRegs A.Invariant _2) )
# 1219 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'registers) in
    Obj.repr(
# 120 "parse.mly"
                    ( A.Registers(mkRegs A.Variant _1)   )
# 1226 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'registers) in
    Obj.repr(
# 122 "parse.mly"
                    ( rdep (A.Registers(mkRegs A.Invariant _3)) )
# 1233 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'registers) in
    Obj.repr(
# 124 "parse.mly"
                    ( rdep (A.Registers(mkRegs A.Variant _2))   )
# 1240 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exports) in
    Obj.repr(
# 126 "parse.mly"
                                               ( A.Export(Some _2, _3) )
# 1248 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exports) in
    Obj.repr(
# 127 "parse.mly"
                                               ( A.Export(None,_2)    )
# 1255 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'imports) in
    Obj.repr(
# 128 "parse.mly"
                                               ( A.Import(Some _2,_3)           )
# 1263 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'imports) in
    Obj.repr(
# 129 "parse.mly"
                                               ( A.Import(None,_2)           )
# 1270 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprAt) in
    Obj.repr(
# 130 "parse.mly"
                                               ( A.Const(None,_2,_4)       )
# 1278 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exprAt) in
    Obj.repr(
# 131 "parse.mly"
                                               ( A.Const(Some _2,_3,_5)    )
# 1287 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'names) in
    Obj.repr(
# 132 "parse.mly"
                                               ( A.Typedef(_2,rev _3)      )
# 1295 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'properties) in
    Obj.repr(
# 133 "parse.mly"
                                               ( A.Target(rev _2)          )
# 1302 "parse.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "parse.mly"
                   ( str2uint _1 )
# 1309 "parse.ml"
               : 'uint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "parse.mly"
                   ( str2uint _1 )
# 1316 "parse.ml"
               : 'uint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uint) in
    Obj.repr(
# 138 "parse.mly"
                                               ( A.Memsize _2      )
# 1323 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parse.mly"
                                               ( A.ByteorderBig    )
# 1329 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parse.mly"
                                               ( A.ByteorderLittle )
# 1335 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 141 "parse.mly"
                                               ( A.FloatRepr _2    )
# 1342 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 142 "parse.mly"
                                               ( A.Charset _2      )
# 1349 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uint) in
    Obj.repr(
# 143 "parse.mly"
                                               ( A.PointerSize _2  )
# 1356 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uint) in
    Obj.repr(
# 144 "parse.mly"
                                               ( A.WordSize _2     )
# 1363 "parse.ml"
               : 'property))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'properties) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'property) in
    Obj.repr(
# 146 "parse.mly"
                                               ( _2 :: _1 )
# 1371 "parse.ml"
               : 'properties))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parse.mly"
                                               ( []       )
# 1377 "parse.ml"
               : 'properties))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'sexprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exprAt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'sections) in
    Obj.repr(
# 150 "parse.mly"
                                               ( _2, _3, rev _5 )
# 1386 "parse.ml"
               : 'span))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'datum) in
    Obj.repr(
# 153 "parse.mly"
                                               ( A.DatumAt(_1,p()) )
# 1393 "parse.ml"
               : 'datumAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 154 "parse.mly"
                                               ( A.Label _1 )
# 1400 "parse.ml"
               : 'datum))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'uint) in
    Obj.repr(
# 155 "parse.mly"
                                               ( A.Align _2 )
# 1407 "parse.ml"
               : 'datum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tyAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'size) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_initAt) in
    Obj.repr(
# 156 "parse.mly"
                                               ( A.MemDecl(_1,_2,_3))
# 1416 "parse.ml"
               : 'datum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'initAt) in
    Obj.repr(
# 158 "parse.mly"
                    ( Some _1 )
# 1423 "parse.ml"
               : 'opt_initAt))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parse.mly"
                                  ( None )
# 1429 "parse.ml"
               : 'opt_initAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 160 "parse.mly"
                                               ( A.InitAt(_1,p()) )
# 1436 "parse.ml"
               : 'initAt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 161 "parse.mly"
                                               ( A.InitExprs(_2)  )
# 1443 "parse.ml"
               : 'init))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parse.mly"
                                               ( A.InitExprs([])  )
# 1449 "parse.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parse.mly"
                                               ( A.InitStr(_1)    )
# 1456 "parse.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string16) in
    Obj.repr(
# 164 "parse.mly"
                                               ( A.InitUStr(_1)   )
# 1463 "parse.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tyAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'regs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 166 "parse.mly"
                                               ( Some _1, _2, rev _3 )
# 1473 "parse.ml"
               : 'registers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'regs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 167 "parse.mly"
                                               ( None   , _1, rev _2 )
# 1482 "parse.ml"
               : 'registers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'regs) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'optEq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parse.mly"
                                               ( (_3, Some _5)::_1 )
# 1492 "parse.ml"
               : 'regs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'regs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 170 "parse.mly"
                                               ( (_3, None   )::_1 )
# 1500 "parse.ml"
               : 'regs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optEq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 171 "parse.mly"
                                               ( [(_1,Some _3)]    )
# 1509 "parse.ml"
               : 'regs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 172 "parse.mly"
                                               ( [(_1,None   )]    )
# 1516 "parse.ml"
               : 'regs))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "parse.mly"
                ( noeqdep () )
# 1522 "parse.ml"
               : 'optEq))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parse.mly"
                       ( () )
# 1528 "parse.ml"
               : 'optEq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprAt) in
    Obj.repr(
# 177 "parse.mly"
                                               ( A.FixSize(_2) )
# 1535 "parse.ml"
               : 'size))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parse.mly"
                                               ( A.DynSize     )
# 1541 "parse.ml"
               : 'size))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parse.mly"
                                               ( A.NoSize      )
# 1547 "parse.ml"
               : 'size))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'conv) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'frmls) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 181 "parse.mly"
                                               (  _1, _2, _3, _4, p() )
# 1557 "parse.ml"
               : 'procedure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'frmls) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 182 "parse.mly"
                                               (None, _1, _2, _3, p() )
# 1566 "parse.ml"
               : 'procedure))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'body0) in
    Obj.repr(
# 184 "parse.mly"
                                               ( rev _2 )
# 1573 "parse.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'body0) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bodyAt) in
    Obj.repr(
# 186 "parse.mly"
                                               ( _2 :: _1 )
# 1581 "parse.ml"
               : 'body0))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parse.mly"
                                               ( []       )
# 1587 "parse.ml"
               : 'body0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'body1) in
    Obj.repr(
# 189 "parse.mly"
                                               ( A.BodyAt(_1,p()) )
# 1594 "parse.ml"
               : 'bodyAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declAt) in
    Obj.repr(
# 190 "parse.mly"
                                               ( A.DeclBody _1    )
# 1601 "parse.ml"
               : 'body1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stackdecl) in
    Obj.repr(
# 191 "parse.mly"
                                               ( A.DataBody _1    )
# 1608 "parse.ml"
               : 'body1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmtAt) in
    Obj.repr(
# 192 "parse.mly"
                                               ( A.StmtBody _1    )
# 1615 "parse.ml"
               : 'body1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'formals) in
    Obj.repr(
# 194 "parse.mly"
                                               ( _2 )
# 1622 "parse.ml"
               : 'frmls))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "parse.mly"
                                               ( [] )
# 1628 "parse.ml"
               : 'frmls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals) in
    Obj.repr(
# 196 "parse.mly"
                                               ( _2 )
# 1635 "parse.ml"
               : 'actls))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parse.mly"
                                               ( [] )
# 1641 "parse.ml"
               : 'actls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'formals_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 199 "parse.mly"
                                               ( rev _1   )
# 1649 "parse.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formals_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 200 "parse.mly"
                                               ( _3 :: _1 )
# 1657 "parse.ml"
               : 'formals_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 201 "parse.mly"
                                               ( [_1]     )
# 1664 "parse.ml"
               : 'formals_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 203 "parse.mly"
                                               ( rev _1   )
# 1672 "parse.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 204 "parse.mly"
                                               ( _3 :: _1 )
# 1680 "parse.ml"
               : 'actuals_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 205 "parse.mly"
                                               ( [_1]     )
# 1687 "parse.ml"
               : 'actuals_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bare_formal) in
    Obj.repr(
# 207 "parse.mly"
                                               ( p(), _1 )
# 1694 "parse.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'opt_kind) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'opt_invariant) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_register) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tyAt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opt_aligned) in
    Obj.repr(
# 209 "parse.mly"
                ( _1, _2, _4, _5, _6 )
# 1706 "parse.ml"
               : 'bare_formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 211 "parse.mly"
               ( Some _1 )
# 1713 "parse.ml"
               : 'opt_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "parse.mly"
                             ( None )
# 1719 "parse.ml"
               : 'opt_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parse.mly"
                          ( A.Invariant )
# 1725 "parse.ml"
               : 'opt_invariant))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parse.mly"
                                            ( A.Variant )
# 1731 "parse.ml"
               : 'opt_invariant))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parse.mly"
                         ( () )
# 1737 "parse.ml"
               : 'opt_register))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parse.mly"
                                  ( () )
# 1743 "parse.ml"
               : 'opt_register))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_kind) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_aligned) in
    Obj.repr(
# 215 "parse.mly"
                                               ( p(), _1, _2, _3 )
# 1752 "parse.ml"
               : 'cformal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cformals_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 217 "parse.mly"
                                               ( rev _1   )
# 1760 "parse.ml"
               : 'cformals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 218 "parse.mly"
                                               ( []       )
# 1767 "parse.ml"
               : 'cformals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cformals_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cformal) in
    Obj.repr(
# 219 "parse.mly"
                                               ( _3 :: _1 )
# 1775 "parse.ml"
               : 'cformals_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cformal) in
    Obj.repr(
# 220 "parse.mly"
                                               ( [_1]     )
# 1782 "parse.ml"
               : 'cformals_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_kind) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_aligned) in
    Obj.repr(
# 222 "parse.mly"
                                               ( _1, _2, _3 )
# 1791 "parse.ml"
               : 'actual))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'data) in
    Obj.repr(
# 224 "parse.mly"
                                               ( rev _3 )
# 1798 "parse.ml"
               : 'stackdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'data) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'datumAt) in
    Obj.repr(
# 226 "parse.mly"
                                               ( _2 :: _1 )
# 1806 "parse.ml"
               : 'data))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "parse.mly"
                                               ( []       )
# 1812 "parse.ml"
               : 'data))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 229 "parse.mly"
                                               ( Some _2 )
# 1819 "parse.ml"
               : 'conv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uint) in
    Obj.repr(
# 231 "parse.mly"
                                               ( _2 )
# 1826 "parse.ml"
               : 'aligned))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'flow) in
    Obj.repr(
# 233 "parse.mly"
                                               ( A.FlowAt(_1,p()) )
# 1833 "parse.ml"
               : 'flowAt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'names) in
    Obj.repr(
# 234 "parse.mly"
                                               ( A.CutsTo(_4)     )
# 1840 "parse.ml"
               : 'flow))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'names) in
    Obj.repr(
# 235 "parse.mly"
                                               ( A.UnwindsTo(_4)  )
# 1847 "parse.ml"
               : 'flow))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'names) in
    Obj.repr(
# 236 "parse.mly"
                                               ( A.ReturnsTo(_4)  )
# 1854 "parse.ml"
               : 'flow))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "parse.mly"
                                               ( A.Aborts         )
# 1860 "parse.ml"
               : 'flow))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "parse.mly"
                                               ( A.NeverReturns   )
# 1866 "parse.ml"
               : 'flow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'flows) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flowAt) in
    Obj.repr(
# 240 "parse.mly"
                                               ( _2 :: _1 )
# 1874 "parse.ml"
               : 'flows))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "parse.mly"
                                               ( []       )
# 1880 "parse.ml"
               : 'flows))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'names) in
    Obj.repr(
# 243 "parse.mly"
                                               ( _2 )
# 1887 "parse.ml"
               : 'targets))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "parse.mly"
                                               ( [] )
# 1893 "parse.ml"
               : 'targets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'alias) in
    Obj.repr(
# 246 "parse.mly"
                                               ( A.AliasAt(_1,p()) )
# 1900 "parse.ml"
               : 'aliasAt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_names) in
    Obj.repr(
# 247 "parse.mly"
                                               ( A.Reads (_2)       )
# 1907 "parse.ml"
               : 'alias))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_names) in
    Obj.repr(
# 248 "parse.mly"
                                               ( A.Writes(_2)       )
# 1914 "parse.ml"
               : 'alias))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'procanns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'flowAt) in
    Obj.repr(
# 250 "parse.mly"
                                               ( A.Flow  _2 :: _1 )
# 1922 "parse.ml"
               : 'procanns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'procanns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aliasAt) in
    Obj.repr(
# 251 "parse.mly"
                                               ( A.Alias _2 :: _1 )
# 1930 "parse.ml"
               : 'procanns))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parse.mly"
                                               ( []       )
# 1936 "parse.ml"
               : 'procanns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nameOrMem) in
    Obj.repr(
# 254 "parse.mly"
                                               ( A.NameOrMemAt(_1,p()) )
# 1943 "parse.ml"
               : 'nameOrMemAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nameOrMem0) in
    Obj.repr(
# 255 "parse.mly"
                                               ( _1 )
# 1950 "parse.ml"
               : 'nameOrMem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aligned) in
    Obj.repr(
# 256 "parse.mly"
                                               ( A.Name(None, _1, Some _2) )
# 1958 "parse.ml"
               : 'nameOrMem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_aligned) in
    Obj.repr(
# 257 "parse.mly"
                                               ( A.Name(Some _1,_2,_3) )
# 1967 "parse.ml"
               : 'nameOrMem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nameOrMem0) in
    Obj.repr(
# 259 "parse.mly"
                                              ( A.NameOrMemAt(_1,p()) )
# 1974 "parse.ml"
               : 'nameOrMemAt0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 260 "parse.mly"
                                              ( A.Name(None, _1, None))
# 1981 "parse.ml"
               : 'nameOrMem0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mem_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'mem_properties) in
    Obj.repr(
# 261 "parse.mly"
                                                                 ( ast_mem _1 _3 _4 )
# 1990 "parse.ml"
               : 'nameOrMem0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sty) in
    Obj.repr(
# 263 "parse.mly"
               ( _1 )
# 1997 "parse.ml"
               : 'mem_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 264 "parse.mly"
               ( A.TypeSynonym(_1) )
# 2004 "parse.ml"
               : 'mem_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aligned) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_in_ids) in
    Obj.repr(
# 266 "parse.mly"
                                    ( (Some _1, _2) )
# 2012 "parse.ml"
               : 'mem_properties))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_aligned) in
    Obj.repr(
# 267 "parse.mly"
                                    ( (_3, _2) )
# 2020 "parse.ml"
               : 'mem_properties))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parse.mly"
                                    ( (None, []) )
# 2026 "parse.ml"
               : 'mem_properties))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "parse.mly"
              ( None )
# 2032 "parse.ml"
               : 'opt_aligned))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aligned) in
    Obj.repr(
# 270 "parse.mly"
                                 ( Some _1 )
# 2039 "parse.ml"
               : 'opt_aligned))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "parse.mly"
              ( [] )
# 2045 "parse.ml"
               : 'opt_in_ids))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 271 "parse.mly"
                              ( _2 )
# 2052 "parse.ml"
               : 'opt_in_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 272 "parse.mly"
                 ( [_1] )
# 2059 "parse.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 273 "parse.mly"
                           ( _1 :: _3 )
# 2067 "parse.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'nameOrMems_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 276 "parse.mly"
                                               ( rev _1   )
# 2075 "parse.ml"
               : 'nameOrMems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nameOrMems_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nameOrMemAt) in
    Obj.repr(
# 277 "parse.mly"
                                               ( _3 :: _1 )
# 2083 "parse.ml"
               : 'nameOrMems_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nameOrMemAt) in
    Obj.repr(
# 278 "parse.mly"
                                               ( [_1]     )
# 2090 "parse.ml"
               : 'nameOrMems_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 280 "parse.mly"
                                               ( A.TyAt(_1,p()) )
# 2097 "parse.ml"
               : 'tyAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sty) in
    Obj.repr(
# 281 "parse.mly"
                                               ( _1             )
# 2104 "parse.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 282 "parse.mly"
                                               ( A.TypeSynonym(_1)  )
# 2111 "parse.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 284 "parse.mly"
                                               ( A.BitsTy(_1)     )
# 2118 "parse.ml"
               : 'sty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'sexprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'sexprAt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 286 "parse.mly"
                                               ( Some(_2,_4) )
# 2129 "parse.ml"
               : 'returnto))
; (fun __caml_parser_env ->
    Obj.repr(
# 287 "parse.mly"
                                               ( None        )
# 2135 "parse.ml"
               : 'returnto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 289 "parse.mly"
                                               ( A.StmtAt(_1,p())     )
# 2142 "parse.ml"
               : 'stmtAt))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "parse.mly"
                                               ( A.EmptyStmt          )
# 2148 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 291 "parse.mly"
                                               ( A.LabelStmt _1       )
# 2155 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'sexprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'sexprAt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 292 "parse.mly"
                                               ( A.SpanStmt(_2,_3,_4) )
# 2164 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'nameOrMems) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 294 "parse.mly"
                ( A.AssignStmt(_1,List.map (fun e -> None,e) _3)  )
# 2172 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'nameOrMems) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'conv) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'flows) in
    Obj.repr(
# 297 "parse.mly"
                ( A.PrimStmt(_1, _3, _5, _6, rev _7) )
# 2183 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'conv) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'flows) in
    Obj.repr(
# 300 "parse.mly"
                ( A.PrimStmt([], _1, _3, _4, rev _5) )
# 2193 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'nameOrMems) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'conv) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'actls) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'targets) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'procanns) in
    Obj.repr(
# 303 "parse.mly"
                ( A.CallStmt(_1, _3, _4, _5, _6, rev _7)  )
# 2205 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'conv) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'actls) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'targets) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'procanns) in
    Obj.repr(
# 306 "parse.mly"
                ( A.CallStmt([], _1, _2, _3, _4, rev _5)  )
# 2216 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'nameOrMems) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'flows) in
    Obj.repr(
# 309 "parse.mly"
                ( A.PrimStmt(_1, None, _4, _5, rev _6)    )
# 2226 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'flows) in
    Obj.repr(
# 312 "parse.mly"
                ( A.PrimStmt( [], None, _2, _3, rev _4))
# 2235 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'nameOrMems) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'actls) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'targets) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'procanns) in
    Obj.repr(
# 315 "parse.mly"
                ( A.CallStmt(_1, None, _3, _4, _5, rev _6))
# 2246 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'actls) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'targets) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'procanns) in
    Obj.repr(
# 318 "parse.mly"
                ( A.CallStmt([], None, _1, _2, _3, rev _4))
# 2256 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 320 "parse.mly"
                                                    (A.IfStmt(_2,_3,[]))
# 2264 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 321 "parse.mly"
                                                    (A.IfStmt(_2,_3,_5))
# 2273 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'targets) in
    Obj.repr(
# 322 "parse.mly"
                                                    (A.GotoStmt(_2,_3))
# 2281 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cformals) in
    Obj.repr(
# 324 "parse.mly"
                                                    (A.ContStmt(_2,_4))
# 2289 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'flows) in
    Obj.repr(
# 325 "parse.mly"
                                                    (A.CutStmt(_3,_4, rev _5)  )
# 2298 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'limitfailure) in
    Obj.repr(
# 326 "parse.mly"
                                                    (A.LimitcheckStmt(_2,_3)  )
# 2306 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'conv) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'targets) in
    Obj.repr(
# 327 "parse.mly"
                                                    (A.JumpStmt(_1  ,_3,[],_4) )
# 2315 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'targets) in
    Obj.repr(
# 328 "parse.mly"
                                                    (A.JumpStmt(None,_2,[],_3) )
# 2323 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'conv) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exprAt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'targets) in
    Obj.repr(
# 329 "parse.mly"
                                                    (A.JumpStmt(_1  ,_3,_4,_5) )
# 2333 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exprAt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actls) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'targets) in
    Obj.repr(
# 330 "parse.mly"
                                                    (A.JumpStmt(None,_2,_3,_4) )
# 2342 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'conv) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'returnto) in
    Obj.repr(
# 331 "parse.mly"
                                                    (A.ReturnStmt(_1  ,_3,[])  )
# 2350 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'returnto) in
    Obj.repr(
# 332 "parse.mly"
                                                    (A.ReturnStmt(None,_2,[])  )
# 2357 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'conv) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'returnto) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'actls) in
    Obj.repr(
# 333 "parse.mly"
                                                    (A.ReturnStmt(_1  ,_3,_4)  )
# 2366 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'returnto) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actls) in
    Obj.repr(
# 334 "parse.mly"
                                                    (A.ReturnStmt(None,_2,_3)  )
# 2374 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'srange) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'arms) in
    Obj.repr(
# 336 "parse.mly"
                        (A.SwitchStmt(_2,_3, rev _5))
# 2383 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 338 "parse.mly"
                               (Some _3)
# 2390 "parse.ml"
               : 'limitfailure))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "parse.mly"
                               (None)
# 2396 "parse.ml"
               : 'limitfailure))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'range) in
    Obj.repr(
# 341 "parse.mly"
                                               (Some _2)
# 2403 "parse.ml"
               : 'srange))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "parse.mly"
                                               (None)
# 2409 "parse.ml"
               : 'srange))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 344 "parse.mly"
                                               (A.Point _1     )
# 2416 "parse.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 345 "parse.mly"
                                               (A.Range (_1,_3))
# 2424 "parse.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ranges_) in
    Obj.repr(
# 347 "parse.mly"
                                               ( rev _1 )
# 2431 "parse.ml"
               : 'ranges))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ranges_) in
    Obj.repr(
# 348 "parse.mly"
                                               ( rev _1 )
# 2438 "parse.ml"
               : 'ranges))
; (fun __caml_parser_env ->
    Obj.repr(
# 349 "parse.mly"
                                               ( [] )
# 2444 "parse.ml"
               : 'ranges))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ranges_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 351 "parse.mly"
                                               ( _3 :: _1 )
# 2452 "parse.ml"
               : 'ranges_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 352 "parse.mly"
                                               ( [_1]     )
# 2459 "parse.ml"
               : 'ranges_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arms) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'armAt) in
    Obj.repr(
# 354 "parse.mly"
                                               ( _2 :: _1  )
# 2467 "parse.ml"
               : 'arms))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "parse.mly"
                                               ( []        )
# 2473 "parse.ml"
               : 'arms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arm) in
    Obj.repr(
# 357 "parse.mly"
                                               ( A.ArmAt(_1,p()) )
# 2480 "parse.ml"
               : 'armAt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ranges) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 358 "parse.mly"
                                               ( A.Case(_2,_4)   )
# 2488 "parse.ml"
               : 'arm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 360 "parse.mly"
                                               ( A.ExprAt(_1, p()) )
# 2495 "parse.ml"
               : 'sexprAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_colon_ty) in
    Obj.repr(
# 361 "parse.mly"
                                               ( A.Sint (_1, _2)   )
# 2503 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_colon_ty) in
    Obj.repr(
# 362 "parse.mly"
                                               ( A.Uint (_1, _2)   )
# 2511 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_colon_ty) in
    Obj.repr(
# 363 "parse.mly"
                                               ( A.Float(_1, _2)   )
# 2519 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_colon_ty) in
    Obj.repr(
# 364 "parse.mly"
                                               ( A.Char (_1, _2)   )
# 2527 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nameOrMemAt0) in
    Obj.repr(
# 365 "parse.mly"
                                               ( A.Fetch _1        )
# 2534 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 367 "parse.mly"
                                               ( A.PrimOp(_1,[])   )
# 2541 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprAt) in
    Obj.repr(
# 368 "parse.mly"
                                               ( _2                )
# 2548 "parse.ml"
               : 'sexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tyAt) in
    Obj.repr(
# 369 "parse.mly"
                           ( Some _2 )
# 2555 "parse.ml"
               : 'opt_colon_ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "parse.mly"
                                         ( None )
# 2561 "parse.ml"
               : 'opt_colon_ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 371 "parse.mly"
                                               ( A.ExprAt(_1, p())    )
# 2568 "parse.ml"
               : 'exprAt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr) in
    Obj.repr(
# 372 "parse.mly"
                                               ( _1                   )
# 2575 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actls) in
    Obj.repr(
# 373 "parse.mly"
                                               ( A.PrimOp(_1,_2)      )
# 2583 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 375 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2592 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 376 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2601 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 377 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2610 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 378 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2619 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 379 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2628 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 380 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2637 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 381 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2646 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 382 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2655 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 383 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2664 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 384 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2673 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 385 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2682 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 386 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2691 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 387 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2700 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 388 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2709 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 389 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2718 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 390 "parse.mly"
                                               ( A.BinOp(_1,_2,_3) )
# 2727 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprAt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 391 "parse.mly"
                                               ( A.PrimOp(_2,[None,_1,None;
                                                              None,_3,None]) )
# 2737 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 393 "parse.mly"
                                               ( A.UnOp(_1,_2)     )
# 2745 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 394 "parse.mly"
                                               ( uminus _2         )
# 2753 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exprs_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 396 "parse.mly"
                                               ( rev _1   )
# 2761 "parse.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 397 "parse.mly"
                                               ( _3 :: _1 )
# 2769 "parse.ml"
               : 'exprs_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exprAt) in
    Obj.repr(
# 398 "parse.mly"
                                               ( [_1]     )
# 2776 "parse.ml"
               : 'exprs_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'imports_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 400 "parse.mly"
                                               ( rev _1           )
# 2784 "parse.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'imports_) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 401 "parse.mly"
                                               ( (Some _3,_5)::_1 )
# 2793 "parse.ml"
               : 'imports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'imports_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 402 "parse.mly"
                                               ( (None   ,_3)::_1 )
# 2801 "parse.ml"
               : 'imports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 403 "parse.mly"
                                               ( [Some _1,_3]     )
# 2809 "parse.ml"
               : 'imports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 404 "parse.mly"
                                               ( [None   ,_1]     )
# 2816 "parse.ml"
               : 'imports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exports_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 406 "parse.mly"
                                               ( rev _1           )
# 2824 "parse.ml"
               : 'exports))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exports_) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 407 "parse.mly"
                                               ( (_3,Some _5)::_1 )
# 2833 "parse.ml"
               : 'exports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exports_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 408 "parse.mly"
                                               ( (_3,None)::_1    )
# 2841 "parse.ml"
               : 'exports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 409 "parse.mly"
                                               ( [_1,Some _3]     )
# 2849 "parse.ml"
               : 'exports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 410 "parse.mly"
                                               ( [_1,None]        )
# 2856 "parse.ml"
               : 'exports_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'names_) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_comma) in
    Obj.repr(
# 412 "parse.mly"
                                               ( rev _1 )
# 2864 "parse.ml"
               : 'names))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'names_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 413 "parse.mly"
                                               ( _3:: _1)
# 2872 "parse.ml"
               : 'names_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 414 "parse.mly"
                                               ( [_1] )
# 2879 "parse.ml"
               : 'names_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'names) in
    Obj.repr(
# 416 "parse.mly"
                      ( _1 )
# 2886 "parse.ml"
               : 'opt_names))
; (fun __caml_parser_env ->
    Obj.repr(
# 417 "parse.mly"
                      ( [] )
# 2892 "parse.ml"
               : 'opt_names))
; (fun __caml_parser_env ->
    Obj.repr(
# 419 "parse.mly"
                                               ()
# 2898 "parse.ml"
               : 'opt_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "parse.mly"
                                               ()
# 2904 "parse.ml"
               : 'opt_comma))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 422 "parse.mly"
                                               ( _3 )
# 2911 "parse.ml"
               : 'string16))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
