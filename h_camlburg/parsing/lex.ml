# 2 "lex.mll"
    
    let rcsid = "$Id: lex.nw,v 1.9 2006-03-08 22:33:10 nr Exp $"

    exception Error of string
    let error msg = raise (Error msg)
    
    (*s: prolog *)
    module T = Parse
    (*x: prolog *)
    let nl lexbuf map =
        let next = (Lexing.lexeme_start lexbuf) + 1 in
            Srcmap.nl map next
    (*x: prolog *)
    let return x = fun map -> x
    (*x: prolog *)
    let get         = Lexing.lexeme
    let getchar     = Lexing.lexeme_char
    (*x: prolog *)
    let keywords    = Hashtbl.create 27
    let keyword s   = try Hashtbl.find keywords s with Not_found -> T.ID(s)
    let _ = Array.iter (fun (str,tok) -> Hashtbl.add keywords str tok)
        [| "start"  , T.START
        ;  "term"   , T.TERM
        ;  "type"   , T.TYPE 
        ;  "head"   , T.HEAD
        ;  "tail"   , T.TAIL
        |]
    (*e: prolog *)

# 32 "lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\232\255\233\255\234\255\235\255\236\255\238\255\239\255\
    \240\255\001\000\243\255\244\255\001\000\076\000\151\000\248\255\
    \011\000\000\000\019\000\018\000\200\000\255\255\001\000\002\000\
    \004\000\249\255\201\000\245\255\241\255\157\000\251\255\158\000\
    \006\000\009\000\255\255\254\255\253\255\217\000\250\255\064\001\
    \189\000\101\000\202\000\255\255\102\000\253\255\220\000\250\255\
    \251\255\177\001\005\000\254\255\255\255\253\255\014\001\252\255\
    \053\000\006\000\255\255\055\000\254\255\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\013\000\255\255\255\255\023\000\009\000\008\000\255\255\
    \005\000\018\000\023\000\023\000\001\000\255\255\002\000\003\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\255\255\255\255\255\255\255\255\255\255\004\000\
    \003\000\005\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\005\000\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\022\000\023\000\
    \024\000\000\000\255\255\000\000\000\000\031\000\000\000\031\000\
    \255\255\255\255\000\000\000\000\000\000\038\000\000\000\255\255\
    \255\255\044\000\255\255\000\000\044\000\000\000\049\000\000\000\
    \000\000\049\000\053\000\000\000\000\000\000\000\056\000\000\000\
    \255\255\059\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\016\000\255\255\255\255\020\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\011\000\015\000\000\000\009\000\028\000\010\000\
    \017\000\005\000\024\000\026\000\002\000\019\000\025\000\018\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\006\000\027\000\008\000\023\000\007\000\022\000\
    \036\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\004\000\061\000\003\000\060\000\000\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\012\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\035\000\255\255\
    \045\000\000\000\000\000\000\000\000\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\030\000\
    \255\255\000\000\000\000\013\000\000\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\020\000\026\000\042\000\000\000\020\000\026\000\033\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\042\000\000\000\000\000\000\000\051\000\000\000\
    \020\000\026\000\042\000\000\000\025\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
    \000\000\042\000\000\000\041\000\000\000\000\000\048\000\000\000\
    \021\000\255\255\255\255\047\000\255\255\255\255\255\255\000\000\
    \000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \032\000\255\255\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\000\000\055\000\000\000\000\000\
    \050\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\000\000\034\000\255\255\039\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\043\000\000\000\000\000\052\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\058\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\023\000\000\000\024\000\255\255\
    \255\255\255\255\255\255\255\255\016\000\255\255\255\255\255\255\
    \016\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\009\000\000\000\
    \000\000\000\000\017\000\016\000\000\000\000\000\016\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\000\000\018\000\000\000\019\000\
    \032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\056\000\000\000\059\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\033\000\041\000\
    \044\000\255\255\255\255\255\255\255\255\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\029\000\
    \031\000\255\255\255\255\013\000\255\255\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\020\000\026\000\042\000\255\255\020\000\026\000\029\000\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\037\000\255\255\255\255\255\255\046\000\255\255\
    \020\000\026\000\042\000\255\255\026\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\255\255\
    \255\255\037\000\255\255\037\000\255\255\255\255\046\000\255\255\
    \000\000\022\000\023\000\046\000\024\000\050\000\057\000\255\255\
    \255\255\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\255\255\255\255\255\255\255\255\255\255\
    \029\000\031\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\255\255\054\000\255\255\255\255\
    \046\000\255\255\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\041\000\044\000\255\255\
    \255\255\255\255\054\000\255\255\255\255\255\255\255\255\255\255\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\255\255\255\255\029\000\031\000\039\000\
    \255\255\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\049\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\049\000\255\255\255\255\255\255\255\255\
    \049\000\037\000\255\255\255\255\046\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\049\000\054\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\049\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 39 "lex.mll"
                            ( fun map -> T.EOF(map) )
# 258 "lex.ml"

  | 1 ->
# 40 "lex.mll"
                            ( fun map -> token lexbuf map )
# 263 "lex.ml"

  | 2 ->
# 41 "lex.mll"
                            ( fun map -> token lexbuf map )
# 268 "lex.ml"

  | 3 ->
# 43 "lex.mll"
                            ( fun map -> token lexbuf map )
# 273 "lex.ml"

  | 4 ->
# 44 "lex.mll"
                            ( fun map -> token lexbuf map )
# 278 "lex.ml"

  | 5 ->
# 45 "lex.mll"
                            ( fun map -> nl lexbuf map; token lexbuf map )
# 283 "lex.ml"

  | 6 ->
# 46 "lex.mll"
                            ( fun map -> line lexbuf map 0; token lexbuf map )
# 288 "lex.ml"

  | 7 ->
# 47 "lex.mll"
                            ( fun map ->
                              if Lexing.lexeme_start lexbuf = 0 then
                                (line lexbuf map 0; token lexbuf map)
                              else
                                error "illegal character `#'"
                            )
# 298 "lex.ml"

  | 8 ->
# 53 "lex.mll"
                            ( return (T.INT(int_of_string(get lexbuf))))
# 303 "lex.ml"

  | 9 ->
# 54 "lex.mll"
                            ( return (keyword (get lexbuf)) )
# 308 "lex.ml"

  | 10 ->
# 55 "lex.mll"
                            ( fun map -> 
                              let p = Lexing.lexeme_start lexbuf + 2 in 
                              let s = action lexbuf 0 map (Buffer.create 80) in
                                T.CODE(Srcmap.location map p,s)
                            )
# 317 "lex.ml"

  | 11 ->
# 61 "lex.mll"
                            ( fun map ->
                              let s = string lexbuf map (Buffer.create 80) in 
                                T.STRING(s)
                            )
# 325 "lex.ml"

  | 12 ->
# 65 "lex.mll"
                            ( fun map -> T.CHAR(char lexbuf map) )
# 330 "lex.ml"

  | 13 ->
# 66 "lex.mll"
                            ( return T.PERCENT )
# 335 "lex.ml"

  | 14 ->
# 67 "lex.mll"
                            ( return T.PPERCENT )
# 340 "lex.ml"

  | 15 ->
# 68 "lex.mll"
                            ( return T.LT )
# 345 "lex.ml"

  | 16 ->
# 69 "lex.mll"
                            ( return T.GT )
# 350 "lex.ml"

  | 17 ->
# 70 "lex.mll"
                            ( return T.COLON )
# 355 "lex.ml"

  | 18 ->
# 71 "lex.mll"
                            ( return T.LPAREN )
# 360 "lex.ml"

  | 19 ->
# 72 "lex.mll"
                            ( return T.RPAREN )
# 365 "lex.ml"

  | 20 ->
# 73 "lex.mll"
                            ( return T.LBRACKET )
# 370 "lex.ml"

  | 21 ->
# 74 "lex.mll"
                            ( return T.RBRACKET )
# 375 "lex.ml"

  | 22 ->
# 76 "lex.mll"
                            ( return T.COMMA )
# 380 "lex.ml"

  | 23 ->
# 78 "lex.mll"
                            ( fun map ->
                              error ( "illegal character `"
                                    ^ get lexbuf
                                    ^ "' in specification"
                                    )
                            )
# 390 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and action lexbuf =
    __ocaml_lex_action_rec lexbuf 29
and __ocaml_lex_action_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 87 "lex.mll"
                            ( fun n map buf ->
                              error "unexpected EOF in semantic action"
                            )
# 403 "lex.ml"

  | 1 ->
# 90 "lex.mll"
                            ( fun n map buf ->
                              if n = 0 then (Buffer.contents buf)
                              else ( Buffer.add_string buf ":}"
                                   ; action lexbuf (n-1) map buf 
                                   )
                            )
# 413 "lex.ml"

  | 2 ->
# 97 "lex.mll"
                            ( fun n map buf ->
                              ( Buffer.add_string buf (get lexbuf)
                              ; action lexbuf (n+1) map buf
                              )
                            )
# 422 "lex.ml"

  | 3 ->
# 104 "lex.mll"
                            ( fun n map buf ->
                              let s = get lexbuf in
                              ( Buffer.add_string buf s
                              ; action lexbuf n map buf
                              )
                            )
# 432 "lex.ml"

  | 4 ->
# 111 "lex.mll"
                            ( fun n map buf -> 
                              ( Buffer.add_char buf '\n'
                              ; nl lexbuf map
                              ; action lexbuf n map buf
                              )
                            )
# 442 "lex.ml"

  | 5 ->
# 117 "lex.mll"
                            ( fun n map buf ->
                              error ("illegal character `"
                                    ^ get lexbuf
                                    ^ "'in action string"
                                    )
                            )
# 452 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_action_rec lexbuf __ocaml_lex_state

and line lexbuf =
    __ocaml_lex_line_rec lexbuf 37
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 126 "lex.mll"
                        ( fun map l ->
                          error "unterminated line directive" 
                        )
# 465 "lex.ml"

  | 1 ->
# 129 "lex.mll"
                        ( line lexbuf )
# 470 "lex.ml"

  | 2 ->
# 130 "lex.mll"
                        ( fun map l ->
                          let string = get lexbuf in
                          let len    = String.length string in
                          let file   = String.sub string 1 (len-2) in
                          let pos    = Lexing.lexeme_start lexbuf in
                          let loc    = file, l-1, 1 in
                                ( Srcmap.sync map pos loc
                                ; () (* return *)
                                )
                        )
# 484 "lex.ml"

  | 3 ->
# 140 "lex.mll"
                        ( fun map l -> 
                          (* inline'ing the l' expression caused an
                          int_of_string failure with ocamlopt *)
                          let l' = int_of_string (Lexing.lexeme lexbuf)
                          in  line lexbuf map l'
                        )
# 494 "lex.ml"

  | 4 ->
# 146 "lex.mll"
                        ( line lexbuf )
# 499 "lex.ml"

  | 5 ->
# 147 "lex.mll"
                        ( fun map l -> 
                          error "illegal character in line directive"
                        )
# 506 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 46
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 153 "lex.mll"
                ( fun map buf -> 
                    error ("end of file in string: " ^ Buffer.contents buf) )
# 518 "lex.ml"

  | 1 ->
# 155 "lex.mll"
                ( fun map buf -> 
                    error ("end of line in string: " ^ Buffer.contents buf) )
# 524 "lex.ml"

  | 2 ->
# 157 "lex.mll"
                ( fun map buf -> 
                  let c = getchar lexbuf 1 in
                  let k = match c with
                      (* | 'n'  -> '\n' *)
                      (* | 't'  -> '\t' *)
                      (* | 'r'  -> '\r' *)
                      | '\n' -> '\n'
                      | _    -> c
                  in   
                     ( Buffer.add_char buf k
                     ; string lexbuf map buf
                     )
                )
# 541 "lex.ml"

  | 3 ->
# 171 "lex.mll"
                ( fun map buf -> 
                   let s = get lexbuf  in
                     ( Buffer.add_string buf s
                     ; string lexbuf map buf
                     )
                )
# 551 "lex.ml"

  | 4 ->
# 177 "lex.mll"
                ( fun map buf -> Buffer.contents buf )
# 556 "lex.ml"

  | 5 ->
# 179 "lex.mll"
                ( fun map buf -> 
                  error ( "illegal character in string: " 
                        ^ Buffer.contents buf
                        ) 
                )
# 565 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and char lexbuf =
    __ocaml_lex_char_rec lexbuf 54
and __ocaml_lex_char_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 187 "lex.mll"
                ( fun map -> error "end of file in character constant" )
# 576 "lex.ml"

  | 1 ->
# 188 "lex.mll"
                ( fun map ->
                  let c = getchar lexbuf 1 in
                    match c with
                    | 'n'   -> '\n'
                    | 't'   -> '\t'
                    | 'r'   -> '\r'
                    | _     -> c
                )
# 588 "lex.ml"

  | 2 ->
# 197 "lex.mll"
                ( fun map -> getchar lexbuf 0 )
# 593 "lex.ml"

  | 3 ->
# 199 "lex.mll"
                ( fun map -> 
                  error (Printf.sprintf 
                            "illegal character constant: %c"
                            (getchar lexbuf 0))
                )
# 602 "lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_char_rec lexbuf __ocaml_lex_state

;;

# 205 "lex.mll"
 
    (*s: epilog *)
    let to_string = function
        | T.ID(s)               -> Printf.sprintf "id(%s)" s
        | T.CODE((f,l,c),s)     -> Printf.sprintf "action(%s)" s 
        | T.INT(d)              -> Printf.sprintf "int(%d)" d
        | T.STRING(s)           -> Printf.sprintf "\"%s\"" (String.escaped s)
        | T.CHAR(c)             -> Printf.sprintf "'%s\'"  (Char.escaped c)

        | T.COLON     -> ":"
        | T.COMMA     -> ","  
        | T.EOF _     -> "<eof>"
        | T.EOL       -> "<eol>"
        | T.GT        -> ">"
        | T.LBRACKET  -> "["
        | T.LPAREN    -> "("
        | T.LT        -> "<"
        | T.PERCENT   -> "%"
        | T.PPERCENT  -> "%%"
        | T.RBRACKET  -> "]"
        | T.RPAREN    -> ")"
        | T.SEMI      -> ";"  
        | T.START     -> "start"  
        | T.TERM      -> "term"
        | T.TYPE      -> "type"  
        | T.HEAD      -> "head" 
        | T.TAIL      -> "tail" 
    (*x: epilog *)
    let scan file =
        let fd          = try open_in file
                          with Sys_error(msg) -> error msg      in
        let finally ()  = close_in fd                           in
        let lexbuf      = Lexing.from_channel fd                in
        let map         = Srcmap.mk ()                          in
        let scanner lb  = token lb map                          in
        let location lb = Srcmap.location map (Lexing.lexeme_start lb) in
        let rec loop lb =
            match scanner lb with
                | T.EOF _   -> ()
                | tok       ->
                    let (file,line,col) = location lb           in
                    let tok             = to_string tok         in
                        ( Printf.printf "%-16s %3d %2d %s\n" file line col tok
                        ; flush stdout
                        ; loop lb
                        )
        in
            ( Srcmap.sync map 0 (file,1,1)
            ; loop lexbuf
            ; finally ()
            )
    (*x: epilog *)
    let main () =
        let argv        = Array.to_list Sys.argv in
            match List.tl argv with
            | file::_   -> scan file; exit 0
            | []        -> error "file name expected on command line"

    (* let _ = main () *)
    (*e: epilog *)

# 670 "lex.ml"
